<?
//###################################################################################
//#                                                                                 #
//#              (C) FreakaZone GmbH                                                #
//#              =======================                                            #
//#                                                                                 #
//###################################################################################
//#                                                                                 #
//# Author       : Christian Scheid                                                 #
//# Date         : 04.03.2024                                                       #
//#                                                                                 #
//# Revision     : $Rev:: 631                                                     $ #
//# Author       : $Author::                                                      $ #
//# File-ID      : $Id:: d1minicfg.req 631 2024-06-29 12:29:38Z                   $ #
//#                                                                                 #
//###################################################################################
namespace request\std;
use Exception;
use system\Helper\wpDatabase;
use system\std, system\WebCom;
use system\Helper\d1mini;

require_once 'request/system/groups.psys';
require_once 'system/Helper/d1mini.psys';

class d1minicfg {
	static $maxFreakaZoneVersion;
	static $maxVersion;
	const c_menusearchd1mini = 'menusearchd1mini';
	public static function menusearchd1mini() {
		echo '
			<div class="searchResult ps-container">
				<div class="searchResultLoading"></div>
				<h3 class="foundNew"></h3>
				<div class="erg"></div>
				<pre class="wpDebugResult"></pre>
			</div>';
	}
	const c_menueditelem = 'menueditelem';
	public static function menueditelem() {
		$wpDatabase = new wpDatabase();
		$wpDatabase->query('SELECT TOP 1 [version] FROM [D1Mini] ORDER BY [version] DESC');
		$erg = $wpDatabase->fetch();
		self::$maxVersion = $erg['version'];
		$html = '
			<h1>D1 Mini Details</h1>
			<div class="versionContainer">
				<span id="BasisEmptyVersion">' . self::$maxVersion . '</span>
			</div>
			<hr />
			<ul>';
		$wpDatabase->query('SELECT [id_d1minigroup], [name] FROM [d1minigroup] ORDER BY [name]');
		while($erg = $wpDatabase->fetch()) {
			$html .= '
				<li class="ps-tree-parent d1minigroupfolder" data-d1minigroup="'.$erg['id_d1minigroup'].'">'.$erg['name'].'</li>
				<li data-d1minis="'.$erg['id_d1minigroup'].'"></li>';
		}
		$html .= '
				<li class="ps-tree-parent d1minigroupfolder" data-d1minigroup="ALL">Alle D1 Minis</li>
				<li data-d1minis="ALL"></li>
				<li class="ps-tree-parent d1minigroupfolder" data-d1minigroup="NULL">D1 Minis ohne Gruppe</li>
				<li data-d1minis="NULL"></li>
			</ul>';
		echo $html;
	}
	const c_menuserversettings = 'menuserversettings';
	public static function menuserversettings() {
		$WebCom = new WebCom();
		$erg = $WebCom->send("GetD1MiniServer");
		$s = \json_decode($erg);
		$OnlineTogglerSendIntervall = 'ERROR';
		$OnlineTogglerWait = 'ERROR';
		if(\json_last_error() == JSON_ERROR_NONE) {
			$OnlineTogglerSendIntervall = $s->OnlineTogglerSendIntervall;
			$OnlineTogglerWait = $s->OnlineTogglerWait;
		}
		$compiledWith = array(
			'DHT11', 'DHT22',
			'wpLDR', 'wpLight',
			'wpBM', 'wpFK',
			'wpRain', 'wpMoisture',
			'wpDistance'
		);
		$html = '
			<h1>D1 Mini Server</h1>
			<div class="settingsContainer">
				<table summary="">
					<tbody>
						<tr>
							<td>
								<label for="OnlineTogglerSendIntervall">OnlineTogglerSendIntervall</label>
							</td>
							<td>
								<input id="OnlineTogglerSendIntervall" class="ps-input" type="text" value="' . $OnlineTogglerSendIntervall . '" />
							</td>
							<td>
								<span class="ps-button OnlineTogglerSendIntervall">save</span>
							</td>
						</tr>
						<tr>
							<td>
								<label for="OnlineTogglerWait">OnlineTogglerWait</label>
							</td>
							<td>
								<input id="OnlineTogglerWait" class="ps-input" type="text" value="' . $OnlineTogglerWait . '" />
							</td>
							<td>
								<span class="ps-button OnlineTogglerWait">save</span>
							</td>
						</tr>
					</tbody>
				</table>
			</div>
			<h1>D1 Mini Settings</h1>
			<div class="settingsContainer">
				<table summary="">
					<tbody>';
		foreach($compiledWith as $plugin) {
			$html .= '
						<tr>
							<td>
								<label for="setAll' . $plugin . 'Cycle">setAll' . $plugin . 'Cycle</label>
							</td>
							<td>
								<input id="setAll' . $plugin . 'Cycle" class="ps-input" type="text" placeholder="setAll' . $plugin . 'Cycle" />
							</td>
							<td>
								<span class="ps-button setAllCycle" data-plugin="' . $plugin . '">save</span>
							</td>
						</tr>';
		}
		$html .= '
					</tbody>
				</table>
			</div>';
		echo $html;
	}
	const c_startFreakaZoneSearch = 'startFreakaZoneSearch';
	public static function startFreakaZoneSearch() {
		header(wpJSON_HEADER);
		$WebCom = new WebCom(5);
		echo $WebCom->send('StartD1MiniSearch');
	}
	const c_saveSearchedDevice = 'saveSearchedDevice';
	public static function saveSearchedDevice() {
		header(wpJSON_HEADER);
		echo '{"msg":"';
		$d1m = new d1mini(std::posts('IP'));
		$newID = $d1m->insertDevice(std::posts('id_d1minigroup'), std::posts('id_mqttgroup'), std::posts('id_dpgroup'), std::posts('id_trendgroup'),
				std::posts('id_alarmgroups5'), std::posts('id_alarmgroups4'), std::posts('id_alarmgroups3'), std::posts('id_alarmgroups2'), std::posts('id_alarmgroups1'));
		if($newID > 0) {
			$WebCom = new WebCom();
			echo '","erg":"';
			echo $WebCom->send('AddD1Mini', $newID);
		}
		echo '"}';
	}
	const c_renewDevice = 'renewDevice';
	public static function renewDevice() {
		header(wpJSON_HEADER);
		echo '{"msg":"';
		$d1m = new d1mini(std::posts('IP'));
		$newID = $d1m->insertDevice(std::posts('id_d1minigroup'), std::posts('id_mqttgroup'), std::posts('id_dpgroup'), std::posts('id_trendgroup'),
				std::posts('id_alarmgroups5'), std::posts('id_alarmgroups4'), std::posts('id_alarmgroups3'), std::posts('id_alarmgroups2'), std::posts('id_alarmgroups1'));
		$WebCom = new WebCom();
		echo '","erg":"';
		echo $WebCom->send('AddD1Mini', $newID);
		echo '"}';
	}
	const c_getd1minis = 'getd1minis';
	public static function getd1minis() {
		$wpDatabase = new wpDatabase();
		$wpDatabase->query('SELECT TOP 1 [version] FROM [D1Mini] ORDER BY [version] DESC');
		$erg = $wpDatabase->fetch();
		d1minicfg::$maxVersion = $erg['version'];
		$sql = 'SELECT ';
		if(std::posts('d1minigroup') == 'ALL') {
			$sql .= '[m].[id_d1mini], [m].[name], [g].[name] AS [group], [m].[description], [m].[ip], [m].[mac], [m].[version], [m].[active]
				FROM [d1mini] [m]
				INNER JOIN [d1minigroup] [g] ON [m].[id_d1minigroup] = [g].[id_d1minigroup]';
		} else {
			$sql .= '[id_d1mini], [name], [description], [ip], [mac], [version], [active]
				FROM [d1mini]
				WHERE [id_d1minigroup] ' . (std::posts('d1minigroup') == 'NULL' ? 'IS NULL' : '= '.std::posts('d1minigroup'));
		}
		$sql .= ' ORDER BY [name]';
		$wpDatabase->query($sql);
		$html = '
<ul class="d1miniingroup" data-group="'.std::posts('d1minigroup').'">
	<li><hr /></li>
	<li>
		<div class="table forall">
			<div class="tr">
				<div class="td"><span>Markierung:</span></div>
				<div class="td">
					<span class="ps-button markall">alle</span>
					<span class="ps-button markno">keine</span>
				</div>
			</div>
			<div class="tr">
				<div class="td"><span>markierte:</span></div>
				<div class="td">
					<span class="ps-button allgroup" title="in Gruppe verschieben">Gruppe</span>
					<span class="ps-button allaktiv" title="aktivieren / deaktivieren">Aktiv</span>
					<span class="ps-button alldelete">l&ouml;schen</span>
				</div>
			</div>
		</div>
	</li>
	<li><hr /></li>
	<li>
		<table summary="">
			<thead>
				<tr>
					<th></th>
					<th>Name</th>
					<th>Beschreibung</th>';
			if(std::posts('d1minigroup') == 'ALL') {
				$html .= '<th>Gruppe</th>';
			}
			$html .= '
					<th>IP</th>
					<th>MAC</th>
					<th>Version</th>
					<th>MQTT</th>
					<th>UpdateMode</th>
					<th>aktiv</th>
					<th>compiledWith</th>
					<th></th>
				</tr>
			</thead>
			<tbody class="D1MiniDeviceList">';
		while($erg = $wpDatabase->fetch()) {
			$update = 'ps-fontyellow';
			if(d1minicfg::$maxVersion == $erg['version'] ) {
				$update = 'ps-fontgreen';
			}
			$html .= '
				<tr class="D1MiniDevice" data-id="' . $erg['id_d1mini'] . '" data-name="' . $erg['name'] . '">
					<td class="buttonbox">
						<span class="ps-checkbox">'.wpHTML_EMPTY.'</span>
					</td>
					<td data-column="name">
						<div class="tdButton">
							<div>
								<span class="stored">' . $erg['name'] . '</span><br />
								<span class="smallfont ps-fontyellow name"></span>
							</div>
							<div class="buttonContainer">
								<span class="ps-hover-noborder ps-image-button ps-export saveFromDevice" title="von D1 Mini übernehmen"></span>
							</div>
						</div>
					</td>
					<td data-column="description">
						<div class="tdButton">
							<div>
								<span class="stored">' . $erg['description'] . '</span><br />
								<span class="smallfont ps-fontyellow description"></span>
							</div>
							<div class="buttonContainer">
								<span class="ps-hover-noborder ps-image-button ps-export saveFromDevice" title="von D1 Mini übernehmen"></span>
							</div>
						</div>
					</td>';
			if(std::posts('d1minigroup') == 'ALL') {
				$html .= '
					<td data-column="group">
						<span>' . $erg['group'] . '</span>
					</td>';
			}
				$html .= '
					<td data-column="ip">
						<div class="tdButton">
							<div>
								<span class="stored">' . $erg['ip'] . '</span><br />
								<span class="smallfont ps-fontyellow ip"></span>
							</div>
							<div class="buttonContainer">
								<span class="ps-hover-noborder ps-image-button ps-export saveFromDevice" title="von D1 Mini übernehmen"></span>
								<a href="http://' . $erg['ip'] . '/print" target="_blank" class="ps-hover-noborder ps-image-button ps-conversation" title="Debug"></a>
								<a href="http://' . $erg['ip'] . '/status" target="_blank" class="ps-hover-noborder ps-image-button ps-status" title="Status"></a>
							</div>
						</div>
					</td>
					<td data-column="mac">
						<div class="tdButton">
							<div>
								<span class="stored">' . $erg['mac'] . '</span><br />
								<span class="smallfont ps-fontyellow mac"></span>
							</div>
							<div class="buttonContainer">
								<span class="ps-hover-noborder ps-image-button ps-export saveFromDevice" title="von D1 Mini übernehmen"></span>
							</div>
						</div>
					</td>
					<td data-column="version">
						<div class="tdButton">
							<div>
								<span class="stored ' . $update . '">' . $erg['version'] . '</span><br />
								<span class="smallfont ps-fontyellow version"></span>
							</div>
							<div class="buttonContainer">
								<span class="ps-hover-noborder ps-image-button ps-export saveFromDevice" title="von D1 Mini übernehmen"></span>
							</div>
						</div>
					</td>
					<td>
						<span class="ps-hover-noborder ps-image-button ps-export renewMqtt" data-ip="' . $erg['ip'] . '"></span>
					</td>
					<td data-column="updatemode">
						<span class="updatemode"></span>
					</td>
					<td>
						' . ($erg['active'] == 1 ? '<span class="ps-fontgreen">aktiv</span>' : '<span class="ps-fontyellow">deaktiviert</span>') . '
					</td>
					<td data-column="compiledWith">
						<span class="compiledWith"></span>
					</td>
					<td class="buttonbox">
						<div class="buttonContainer">
							<span class="ps-hover-noborder ps-image-button ps-send forceupdate" title="Force MQTT Update"></span>
							<!--span class="ps-hover-noborder ps-image-button ps-import setupmode" title="Set FW Update Mode On"></span-->
							<span class="ps-hover-noborder ps-image-button ps-import setuphttp" data-ip="' . $erg['ip'] . '" title="Setup Http"></span>
							<span class="ps-hover-noborder ps-image-button ps-refresh restartdevice" title="neu starten"></span>
						</div>
					</td>
				</tr>
				<!--tr class="D1MiniDeviceJson" data-json="' . $erg['name'] . '">
					<td class="buttonbox"></td>
					<td colspan="10" class="json">
						<pre></pre>
					</td>
					<td class="buttonbox"></td>
				</tr-->';
		}
		$html .= '
			</tbody>
		</table>
	</li>
</ul>';
		echo $html;
	}
	const c_getalld1minisettings = 'getalld1minisettings';
	public static function getalld1minisettings() {
		header('Content-Type: application/json');
		echo self::getD1MiniSettings(std::posts('d1minigroup'));
	}
	const c_getregisteredd1minis = 'getregisteredd1minis';
	public static function getregisteredd1minis() {
		header('Content-Type: application/json');
		$WebCom = new WebCom();
		echo $WebCom->send('getAllD1MiniSettings');
	}
	const c_updateColumn = 'updateColumn';
	public static function updateColumn($id, $column, $value) {
		$wpDatabase = new wpDatabase();
		if($value != '') {
			$sql = "UPDATE [d1mini] SET [$column] = '$value' WHERE [id_d1mini] = $id";
			$wpDatabase->query($sql);
		}
	}
	const c_setcmd = 'setcmd';
	public static function setcmd($name, $cmd) {
		$WebCom = new WebCom();
		echo $WebCom->send('SetD1MiniCmd', "$name%~%$cmd");
	}
	const c_starthttpupdate = 'starthttpupdate';
	public static function starthttpupdate($ip) {
		$context = stream_context_create([
			"http" => [
				"method"=>"GET",
				"timeout" => 1
			]
		]);
		try {
			file_get_contents('http://' . $ip . '/setCmd?cmd=UpdateHTTP', 0, $context);
		} catch(Exception $e) {
			// Fail silently
		}
		//echo file_get_contents('http://' . $ip . '/setCmd?cmd=UpdateHTTP');
	}
	const c_allGroup = 'allGroup';
	public static function allGroup() {
		$where = '';
		foreach(std::posts('ids') as $ids) {
			$where .= '[id_d1mini] = '.$ids.' OR ';
		}
		$database = new wpDatabase();
		$database->query("UPDATE [d1mini] SET
			[id_d1minigroup] = ".std::posts('newgroup')."
			WHERE ".substr($where, 0, -4));
		echo '{"erg": "S_OK"}';
	}
	const c_allActive = 'allActive';
	public static function allActive() {
		$where = '';
		foreach(std::posts('ids') as $ids) {
			$where .= '[id_d1mini] = '.$ids.' OR ';
		}
		$database = new wpDatabase();
		$database->query("UPDATE [d1mini] SET
			[active] = ".(std::posts('newaktiv') == 'True' ? '1' : '0')."
			WHERE ".substr($where, 0, -4));
	}
	const c_allDelete = 'allDelete';
	public static function allDelete() {
		header(wpJSON_HEADER);
		$fortcp = '';
		foreach(std::posts('ids') as $ids) {
			$fortcp .= $ids.'%~%';
		}
		$WebCom = new WebCom();
		echo $WebCom->send('DeleteD1Mini', substr($fortcp, 0, -3));
	}
	const c_getServerSettings = 'getServerSettings';
	public static function getServerSettings() {
		header(wpJSON_HEADER);
		$WebCom = new WebCom();
		echo $WebCom->send("GetD1MiniServer");
	}
	const c_setServerSetting = 'setServerSetting';
	public static function setServerSetting() {
		$WebCom = new WebCom();
		echo $WebCom->send('SetD1MiniServer', std::posts('key') . '%~%' . std::posts('val'));
	}
	const c_setAllCycle = 'setAllCycle';
	public static function setAllCycle() {
		$erg = self::getD1MiniSettings();
		$D1Minis = \json_decode($erg);
		$key = (std::posts('key') == 'DHT11' || std::posts('key') == 'DHT22') ? 'HT' : std::posts('key');
		//$WebCom = new WebCom();
		foreach($D1Minis as $name => $D1Mini) {
			if(isset($D1Mini->compiledWith) && str_contains($D1Mini->compiledWith, $key)) {
				echo 'publishTopic: ' . $name . '/settings/' . $key . '/maxCycle%~%' . std::posts('val');
				//$WebCom->send('publishTopic', $name . '/settings/' . $key . '/maxCycle%~%' . std::posts('val'));
			}
		}
	}
	private static function getSelect($val, $name) {
		return "<option value='$val'>$name</option>";
	}
	private static function getD1MiniSettings($selectAll = 'ALL') {
		$sql = "SELECT [id_d1mini], [ip] FROM [d1mini]";
		if($selectAll != 'ALL') $sql .= " WHERE [id_d1minigroup] = " . $selectAll;
		$wpDatabase = new wpDatabase();
		$wpDatabase->query($sql);
		$returns = "{";
		$dividor = '';
		while($erg = $wpDatabase->fetch()) {
			$WebCom = new WebCom();
			$d1miniText = $WebCom->send('getD1MiniStatus', $erg['ip']);
			$jsontext = \json_decode($d1miniText);
			if(isset($jsontext->FreakaZoneDevice)) {
				$wpFZ = $jsontext->FreakaZoneDevice;
				//std::test_array($wpFZ);
				$compiledWith = array();
				$compiledWithExclude = array('EEPROM', 'WiFi', 'MQTT', 'Search', 'Rest',
					'Finder', 'Modules', 'OnlineToggler', 'Update', 'WebServer');
				foreach($wpFZ->Debug as $module => $active) {
					if(!\in_array($module, $compiledWithExclude)) {
						$compiledWith[] = $module;
					}
					$active; // need only key
				}
				$returns .= $dividor .
				'"' . $wpFZ->DeviceName . '":{' .
				'"DeviceName":"' . $wpFZ->DeviceName . '",' .
				'"DeviceDescription":"' . $wpFZ->DeviceDescription . '",' .
				'"Version":"' . $wpFZ->Version . '",' .
				'"Ip":"' . $erg['ip'] . '",' .
				'"Mac":"' . $wpFZ->MAC . '",' .
				//'"Ssid":"' . $wpFZ->DeviceName . '",' .
				'"UpdateMode":' . ($wpFZ->UpdateMode ? 'true' : 'false') . ',' .
				'"compiledWith":"' . implode(', ', $compiledWith) . '",'.
				'"D1MiniText":' . $d1miniText .
				'}';
				$dividor = ',';
			}
		}
		$returns .= '}';
		return $returns;
	}
}

switch(std::gets('param1')) {
	//###################################################################################
	case d1minicfg::c_menusearchd1mini:
		d1minicfg::menusearchd1mini();
		break;
		//###################################################################################
	case d1minicfg::c_menueditelem:
		d1minicfg::menueditelem();
		break;
		//###################################################################################
	case d1minicfg::c_menuserversettings:
		d1minicfg::menuserversettings();
		break;
		//###################################################################################
	case d1minicfg::c_startFreakaZoneSearch:
		d1minicfg::startFreakaZoneSearch();
		break;
		//###################################################################################
	case d1minicfg::c_saveSearchedDevice:
		d1minicfg::saveSearchedDevice();
		break;
		//###################################################################################
	case d1minicfg::c_renewDevice:
		d1minicfg::renewDevice();
		break;
		//###################################################################################
	case d1minicfg::c_getd1minis:
		d1minicfg::getd1minis();
		break;
		//###################################################################################
	case d1minicfg::c_getalld1minisettings:
		d1minicfg::getalld1minisettings();
		break;
		//###################################################################################
	case d1minicfg::c_getregisteredd1minis:
		d1minicfg::getregisteredd1minis();
		break;
		//###################################################################################
	case d1minicfg::c_updateColumn:
		d1minicfg::updateColumn(std::posts('id'), std::posts('column'), std::posts('value'));
		break;
		//###################################################################################
	case d1minicfg::c_setcmd:
		d1minicfg::setcmd(std::posts('name'), std::posts('cmd'));
		break;
		//###################################################################################
	case d1minicfg::c_starthttpupdate:
		d1minicfg::starthttpupdate(std::posts('ip'));
		break;
		//###################################################################################
	case d1minicfg::c_allGroup:
		d1minicfg::allGroup();
		break;
		//###################################################################################
	case d1minicfg::c_allActive:
		d1minicfg::allActive();
		break;
		//###################################################################################
	case d1minicfg::c_allDelete:
		d1minicfg::allDelete();
		break;
		//###################################################################################
	case d1minicfg::c_getServerSettings:
		d1minicfg::getServerSettings();
		break;
		//###################################################################################
	case d1minicfg::c_setServerSetting:
		d1minicfg::setServerSetting();
		break;
		//###################################################################################
	case d1minicfg::c_setAllCycle:
		d1minicfg::setAllCycle();
		break;
		//###################################################################################
	default:
		//\system\html::default();
		break;
}

?>

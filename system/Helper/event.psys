<?
//###################################################################################
//#                                                                                 #
//#              (C) FreakaZone GmbH                                                #
//#              =======================                                            #
//#                                                                                 #
//###################################################################################
//#                                                                                 #
//# Author       : Ghislain Meupe                                                   #
//# Date         : 31.10.2018                                                       #
//#                                                                                 #
//# Revision     : $Rev:: 562                                                     $ #
//# Author       : $Author::                                                      $ #
//# File-ID      : $Id:: event.psys 562 2024-01-16 02:08:14Z                      $ #
//#                                                                                 #
//###################################################################################
/**
 * @var Type $m
 * @var Type $uid
 * @var Type $description
 * @var Type $summary
 * @var Type $dtStart
 * @var Type $dtEnd
 * @var Type $dtStamp
*/
namespace system\Helper;
use DateTime;
class event {
	protected $uid,
			$description,
			$summary,
			$dtStart,
			$dtEnd,
			$dtStamp;

	public function __construct($uid, $description, $summary, $dtStart, $dtEnd, $dtStamp) {
		$this->uid				= $uid;
		$this->description		= $description;
		$this->summary			= $summary;
		$this->dtStart			= $this->formatDates($dtStart);
		$this->dtEnd			= $this->formatDates($dtEnd);
		$this->dtStamp			= $dtStamp;
	}

	/**
	 * @return mixed
	 */
	public function getUid() {
		return $this->uid;
	}

	/**
	 * @return mixed
	 */
	public function getDescription() {
		return $this->description;
	}

	/**
	 * @return mixed
	 */
	public function getSummary() {
		return $this->summary;
	}

	/**
	 * @return mixed
	 */
	public function getDtStart() {
		return $this->dtStart;
	}

	/**
	 * @return mixed
	 */
	public function getDtEnd() {
		return $this->dtEnd;
	}

	/**
	 * @return mixed
	 */
	public function getDtStamp() {
		return $this->dtStamp;
	}

	public function __toString() {
		return print_r($this, true);
	}

	protected function formatDates($value) {
		$matches = [];
		if(preg_match('#^([0-9]{4})([0-9]{2})([0-9]{2})$#', $value, $matches)) {
			$value = $matches[1] . '-' . $matches[2] . '-' . $matches[3] .
			'T00:00:00';
		}
		return $value;
	}
}
class calendarevent extends event {
	public function __construct($uid, $description, $summary, $dtStart, $dtEnd, $dtStamp) {
		parent::__construct($uid, $description, $summary, $dtStart, $dtEnd, $dtStamp);

		$this->checkTimes();
	}

	protected function checkTimes(){
		if((strlen($this->dtStart) > 0 && ($this->dtEnd == '' || $this->dtEnd == null)) ||
				($this->dtStart === $this->dtEnd)){
			$time = new DateTime($this->dtStart);
			$time->add(new \DateInterval('P1D'));
			$this->dtEnd = $time->format('Y-m-d\TH:i:s');
		}
	}
}
abstract class Parser {

	/**
	 * the path of the icalendat .ics file
	 */
	protected $path;

	/**
	 * the content of the path as a String
	 */
	protected $calendar;

	/**
	 * the list of events in the file
	 */
	protected $events = [];

	public function __construct($path) {
		$this->path = $path;
	}

	/**
	 * reads the calendar and parse the events
	 *
	 * @return array events. all the events in the calendar
	 */
	public function prepareEvents() {
		$this->readCalendar();
		$this->parseEvents();
		return $this->events;
	}

	/**
	 * read the path and save its content.
	 * this content is saved in the class
	 * variable $calendar
	 */
	protected abstract function readCalendar();

	/**
	 * get all the Events of the Calendar and return them as list of events
	 * as instances of Event
	 */
	protected abstract function parseEvents();
}
class ParserIcs extends Parser {
	function readCalendar() {
		if(!file_exists($this->path)) {
			echo PHP_EOL.'file not found at:' . $this->path .PHP_EOL;
			return null;
		}

		$this->calendar = file_get_contents($this->path);
	}

	function parseEvents() {
		$found = preg_match_all('#BEGIN:VEVENT(.*)END:VEVENT#sU', $this->calendar, $m);
		if ($found === false || $found === null || $found === 0) {
			echo PHP_EOL.'no Events found in the calendar at ' . $this->path .PHP_EOL;
			return null;
		}

		foreach($m[1] as $event) {
			preg_match('#UID:(.*)\\n#', $event, $uid);
			preg_match('#DESCRIPTION:(.*)\\n#', $event, $description);
			preg_match('#SUMMARY:(.*)\\n#', $event, $summary);
			preg_match('#DTSTART;VALUE=DATE:(.*)\\n#', $event, $dtStart);
			preg_match('#DTEND;VALUE=DATE:(.*)\\n#', $event, $dtEnd);
			preg_match('#DTSTAMP:(.*)\\n#', $event, $dtStamp);

			$this->events[] = new calendarevent(rtrim($uid[1]), rtrim($description[1]),
				rtrim($summary[1]), rtrim($dtStart[1]), rtrim($dtEnd[1]), rtrim($dtStamp[1]));
		}
	}
}
class eventutilities {

	/**
	 * figure out if an id belongs to a calendarszene or if it belongs to a
	 * simple calendar.
	 *
	 * @param mixed $database a connection to the database
	 * @param int $idCalendar the identity of a calender to check
	 * @return bool true if idCalendar is that of a scene or false if it is not
	 * the case
	 */
	public static function isSzene($database, $idCalendar) {
		$database->query('SELECT [id_scenegroup] FROM [calendar] WHERE [id_calendar] = ' . $idCalendar);
		$idsg = $database->fetch()['id_scenegroup'];

		if($idsg != '') {
			return true;
		} else {
			return false;
		}
	}
}
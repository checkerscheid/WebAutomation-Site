<?
//###################################################################################
//#                                                                                 #
//#              (C) FreakaZone GmbH                                                #
//#              =======================                                            #
//#                                                                                 #
//###################################################################################
//#                                                                                 #
//# Author       : Christian Scheid                                                 #
//# Date         : 26.04.2024                                                       #
//#                                                                                 #
//# Revision     : $Rev:: 603                                                     $ #
//# Author       : $Author::                                                      $ #
//# File-ID      : $Id:: d1mini.psys 603 2024-05-01 06:01:25Z                     $ #
//#                                                                                 #
//###################################################################################
namespace system\Helper;
use system\WebCom;
/**
 * ermittelt den D1 Mini CompiledWith und ordnet ihm MQTT und Datenpunkte zu
 * @author Checker
 */
class d1mini {
	const DHT = 'DHT';
	const LDR = 'LDR';
	const Light = 'Light';
	const BM = 'BM';
	const Rain = 'Rain';
	const Distance = 'Distance';

	private $database, $webCom, $status;
	private $idD1MiniGroup, $idMqttBroker, $idDBGroup, $idTrendGroup;
	private $id, $name, $description, $ip, $wpFreakaZoneVersion, $version, $mac;
	public function __construct($ip) {
		$this->database = new wpDatabase();
		$this->webCom = new WebCom();
		$this->ip = $ip;
		$res = $this->webCom->send('getD1MiniStatus', $ip);
		$this->status = \json_decode($res);
		$this->name = $this->status->FreakaZoneDevice->DeviceName;
		$this->description = $this->status->FreakaZoneDevice->DeviceDescription;
		$this->wpFreakaZoneVersion = $this->status->FreakaZoneDevice->wpFreakaZoneVersion;
		$this->version = $this->status->FreakaZoneDevice->Version;
		$this->mac = $this->status->FreakaZoneDevice->miniMAC;
	}
	public function insertDevice($idD1MiniGroup, $idMqttBroker, $idDBGroup, $idTrendGroup) {
		$this->idD1MiniGroup = $idD1MiniGroup;
		$this->idMqttBroker = $idMqttBroker;
		$this->idDBGroup = $idDBGroup;
		$this->idTrendGroup = $idTrendGroup;

		$this->setDevice();
		$this->setRSSI();
		if(isset($this->status->FreakaZoneDevice->HT)) {
			$this->setHT();
		}
		if(isset($this->status->FreakaZoneDevice->LDR)) {
			$this->setLDR();
		}
		if(isset($this->status->FreakaZoneDevice->Light)) {
			$this->setLight();
		}
		if(isset($this->status->FreakaZoneDevice->BM)) {
			$this->setBM();
		}
		if(isset($this->status->FreakaZoneDevice->Rain)) {
			$this->setRain();
		}
		if(isset($this->status->FreakaZoneDevice->Distance)) {
			$this->setVolume();
		}
		return $this->id;
	}
	private function setDevice() {
		$this->mergeDivice();
	}
	private function setRSSI() {
		$id_mqtttopic = $this->insertTopic('info/WIFI/RSSI');
		$id_dp = $this->mergeDP($id_mqtttopic, 'Rssi', 'Signal', 'db', 0, -130, 0);
		$this->mergeTrend($id_dp, 'Signal', 120);
	}
	private function setHT() {
		$id_mqtttopic_temp = $this->insertTopic('Temperature');
		$id_dp_temp = $this->mergeDP($id_mqtttopic_temp, 'Temp', 'Temperatur', '°C', 1, -50);
		$this->mergeTrend($id_dp_temp, 'Temperatur');
		$id_mqtttopic_hum = $this->insertTopic('Humidity');
		$id_dp_hum = $this->mergeDP($id_mqtttopic_hum, 'Hum', 'Feuchte', '%rF', 0);
		$this->mergeTrend($id_dp_hum, 'Feuchte');
	}
	private function setLDR() {
		$id_mqtttopic = $this->insertTopic('LDR');
		$id_dp = $this->mergeDP($id_mqtttopic, 'LDR', 'LDR', 'lux', 0, 0, 1024);
		$this->mergeTrend($id_dp, 'LDR');
	}
	private function setLight() {
		$id_mqtttopic = $this->insertTopic('Light');
		$id_dp = $this->mergeDP($id_mqtttopic, 'Light', 'Licht', 'lux', 0, 0, 1024);
		$this->mergeTrend($id_dp, 'Licht');
	}
	private function setBM() {
		$id_mqtttopic = $this->insertTopic('BM');
		$this->mergeDP($id_mqtttopic, 'BM', 'Bewegung', '1:Bewegung;0:Stille;');
	}
	private function setRain() {
		$id_mqtttopic = $this->insertTopic('Rain');
		$id_dp = $this->mergeDP($id_mqtttopic, 'Rain', 'Regen', 'l/min', 3, 0, 10);
		$this->mergeTrend($id_dp, 'Licht');
	}
	private function setVolume() {
		$id_mqtttopic = $this->insertTopic('Volume');
		$id_dp = $this->mergeDP($id_mqtttopic, 'Vol', 'Füllstand', 'l', 0, 0, 10000);
		$this->mergeTrend($id_dp, 'Füllstand', 120);
	}
	private function mergeDivice($active = 1) {
		$sql = "
MERGE INTO [d1mini] AS [TARGET]
	USING (
		VALUES (
			$this->idD1MiniGroup, '$this->name', '$this->description',
			'$this->wpFreakaZoneVersion', '$this->version', '$this->ip', '$this->mac', $active
		)
	) AS [SOURCE] (
			[id_d1minigroup], [name], [description],
			[wpFreakaZoneVersion], [version], [ip], [mac], [active]
	) ON
		[TARGET].[name] = [SOURCE].[name]
	WHEN MATCHED THEN
		UPDATE SET
			[TARGET].[id_d1minigroup] = [SOURCE].[id_d1minigroup],
			[TARGET].[description] = [SOURCE].[description],
			[TARGET].[wpFreakaZoneVersion] = [SOURCE].[wpFreakaZoneVersion],
			[TARGET].[version] = [SOURCE].[version],
			[TARGET].[ip] = [SOURCE].[ip],
			[TARGET].[mac] = [SOURCE].[mac],
			[TARGET].[active] = [SOURCE].[active]
	WHEN NOT MATCHED THEN
		INSERT (
			[id_d1minigroup], [name], [description],
			[wpFreakaZoneVersion], [version], [ip], [mac], [active]
		)
		VALUES (
			[SOURCE].[id_d1minigroup], [SOURCE].[name], [SOURCE].[description],
			[SOURCE].[wpFreakaZoneVersion], [SOURCE].[version], [SOURCE].[ip], [SOURCE].[mac], [SOURCE].[active]
		)
	OUTPUT [INSERTED].[id_d1mini] AS [ID];";
		$this->database->query($sql);
		$this->id = $this->database->fetch()['ID'];
	}
	private function insertTopic($aptopic) {
		$sql = "
INSERT INTO [mqtttopic]
	([id_mqttbroker], [topic])
OUTPUT [INSERTED].[id_mqtttopic] AS [ID]
VALUES
	(" . $this->idMqttBroker . ", '" . $this->name . "/info/WiFi/RSSI')";
		$this->database->query($sql);
		return $this->database->fetch()['ID'];
	}
	private function mergeDP($idtopic, $apname, $apdec, $unit = '', $nks = '', $min = 0, $max = 100, $active = 1) {
		$sql = "
MERGE INTO [dp] AS [TARGET]
	USING (
		VALUES (
			$this->idDBGroup, $idtopic, '" . $this->name . "_" . $apname . "', '$this->description $apdec',
			'$unit', $nks, $min, $max, $active
		)
	) AS [SOURCE] (
			[id_dpgroup], [id_mqtttopic], [name], [description],
			[unit], [nks], [min], [max], [active]
	) ON
		[TARGET].[name] = [SOURCE].[name]
	WHEN MATCHED THEN
		UPDATE SET
			[TARGET].[id_dpgroup] = [SOURCE].[id_dpgroup],
			[TARGET].[id_mqtttopic] = [SOURCE].[id_mqtttopic],
			[TARGET].[description] = [SOURCE].[description],
			[TARGET].[unit] = [SOURCE].[unit],
			[TARGET].[nks] = [SOURCE].[nks],
			[TARGET].[min] = [SOURCE].[min],
			[TARGET].[max] = [SOURCE].[max],
			[TARGET].[active] = [SOURCE].[active]
	WHEN NOT MATCHED THEN
		INSERT (
			[id_dpgroup], [id_mqtttopic], [name], [description],
			[unit], [nks], [min], [max], [active]
		)
		VALUES (
			[SOURCE].[id_dpgroup], [SOURCE].[id_mqtttopic], [SOURCE].[name], [SOURCE].[description],
			[SOURCE].[unit], [SOURCE].[nks], [SOURCE].[min], [SOURCE].[max], [SOURCE].[active]
		)
	OUTPUT [INSERTED].[id_dp] AS [ID];";
			$this->database->query($sql);
			return $this->database->fetch()['ID'];
	}
	private function mergeTrend($id_dp, $apdesc, $intervall = 0, $active = 1) {
		$sql = "
MERGE INTO [trend] AS [TARGET]
	USING (
		VALUES (
			$id_dp, $this->idTrendGroup, '$this->description $apdesc', $intervall, $active
		)
	) AS [SOURCE] (
		[id_dp], [id_trendgroup], [name], [intervall], [active]
	) ON
		[TARGET].[id_dp] = [SOURCE].[id_dp]
	WHEN MATCHED THEN
		UPDATE SET
			[TARGET].[id_dp] = [SOURCE].[id_dp],
			[TARGET].[id_trendgroup] = [SOURCE].[id_trendgroup],
			[TARGET].[name] = [SOURCE].[name],
			[TARGET].[intervall] = [SOURCE].[intervall],
			[TARGET].[active] = [SOURCE].[active]
	WHEN NOT MATCHED THEN
		INSERT (
			[id_dp], [id_trendgroup],
			[name], [intervall], [active]
		)
		VALUES (
			[SOURCE].[id_dp], [SOURCE].[id_trendgroup],
			[SOURCE].[name], [SOURCE].[intervall], [SOURCE].[active]
		);";
		$this->database->query($sql);
	}
}
?>
<?
//###################################################################################
//#                                                                                 #
//#              (C) FreakaZone GmbH                                                #
//#              =======================                                            #
//#                                                                                 #
//###################################################################################
//#                                                                                 #
//# Author       : Christian Scheid                                                 #
//# Date         : 26.04.2024                                                       #
//#                                                                                 #
//# Revision     : $Rev:: 734                                                     $ #
//# Author       : $Author::                                                      $ #
//# File-ID      : $Id:: d1mini.psys 734 2025-04-25 19:30:07Z                     $ #
//#                                                                                 #
//###################################################################################
namespace system\Helper;
use system\WebCom;

/**
 * ermittelt den D1 Mini CompiledWith und ordnet ihm MQTT und Datenpunkte zu
 * @author Checker
 * @todo SQL, connect D1Mini to MQTT Topic
 */
class d1mini {

	private $database, $webCom, $status;
	private $idD1MiniGroup, $idMqttGroup, $idDBGroup, $idTrendGroup, $idAlarmGroup;
	private $idAlarmGroups5, $idAlarmGroups4, $idAlarmGroups3, $idAlarmGroups2, $idAlarmGroups1;
	private $id, $name, $description, $ip, $version, $mac;
	private $canInserted;
	public function __construct($ip) {
		$this->database = new wpDatabase();
		$this->webCom = new WebCom();
		$this->ip = $ip;
		$this->canInserted = false;
		$res = $this->webCom->send('getD1MiniStatus', $ip);
		$this->status = \json_decode($res);
		if(\json_last_error() == JSON_ERROR_NONE) {
			$this->canInserted = true;
			$this->name = $this->status->FreakaZoneDevice->DeviceName;
			$this->description = $this->status->FreakaZoneDevice->DeviceDescription;
			$this->version = $this->status->FreakaZoneDevice->Version;
			$this->mac = $this->status->FreakaZoneDevice->miniMAC;
			echo "save '" . $this->name . "' (" . $this->ip . ")<br />";
		} else {
			echo \json_last_error_msg();
		}
	}
	public function insertDevice($idD1MiniGroup, $idMqttroup, $idDBGroup, $idTrendGroup,
			$idAlarmGroups5, $idAlarmGroups4, $idAlarmGroups3, $idAlarmGroups2, $idAlarmGroups1) {
		$this->idD1MiniGroup = $idD1MiniGroup;
		$this->idMqttGroup = $idMqttroup;
		$this->idDBGroup = $idDBGroup;
		$this->idTrendGroup = $idTrendGroup;
		$this->idAlarmGroups5 = $idAlarmGroups5;
		$this->idAlarmGroups4 = $idAlarmGroups4;
		$this->idAlarmGroups3 = $idAlarmGroups3;
		$this->idAlarmGroups2 = $idAlarmGroups2;
		$this->idAlarmGroups1 = $idAlarmGroups1;
		$this->idAlarmGroup = 1;
		if($this->canInserted) {
			$this->setDevice();
			$this->setRSSI();
			$this->setOnline();
			$this->setNewUpdate();
			if($this->status->FreakaZoneDevice->useModul->DHT11 ||
					$this->status->FreakaZoneDevice->useModul->DHT22) {
				$this->setDHT();
			}
			if($this->status->FreakaZoneDevice->useModul->LDR) {
				$this->setLDR();
			}
			if($this->status->FreakaZoneDevice->useModul->Light) {
				$this->setLight();
			}
			if($this->status->FreakaZoneDevice->useModul->BM) {
				$this->setBM();
			}
			if($this->status->FreakaZoneDevice->useModul->Window) {
				$this->setWindow();
			}
			if(isset($this->status->FreakaZoneDevice->useModul->Window2) &&
				$this->status->FreakaZoneDevice->useModul->Window2) {
				$this->setWindow2();
			}
			if(isset($this->status->FreakaZoneDevice->useModul->Window3) &&
				$this->status->FreakaZoneDevice->useModul->Window3) {
				$this->setWindow3();
			}
			if(isset($this->status->FreakaZoneDevice->useModul->Weight) &&
				$this->status->FreakaZoneDevice->useModul->Weight) {
				$this->setWeight();
			}
			if($this->status->FreakaZoneDevice->useModul->Relais ||
					$this->status->FreakaZoneDevice->useModul->RelaisShield) {
				$this->setRelais($this->status->FreakaZoneDevice->useModul->Moisture);
			}
			if($this->status->FreakaZoneDevice->useModul->Rain) {
				$this->setRain();
			}
			if($this->status->FreakaZoneDevice->useModul->Distance) {
				$this->setVolume();
			}
			if($this->status->FreakaZoneDevice->useModul->Moisture) {
				$this->setMoisture();
			}
			if(isset($this->status->FreakaZoneDevice->useModul->CwWw) &&
				$this->status->FreakaZoneDevice->useModul->CwWw) {
				$this->setCwWw();
			}
			if(isset($this->status->FreakaZoneDevice->useModul->NeoPixel) &&
				$this->status->FreakaZoneDevice->useModul->NeoPixel) {
				$this->setNeoPixel();
			}
			if(isset($this->status->FreakaZoneDevice->useModul->AnalogOut) &&
				$this->status->FreakaZoneDevice->useModul->AnalogOut) {
				$this->setAnalogOut();
			}
			if(isset($this->status->FreakaZoneDevice->useModul->AnalogOut2) &&
				$this->status->FreakaZoneDevice->useModul->AnalogOut2) {
				$this->setAnalogOut2();
			}
			if(isset($this->status->FreakaZoneDevice->useModul->ImpulseCounter) &&
				$this->status->FreakaZoneDevice->useModul->ImpulseCounter) {
				$this->setImpulseCounter();
			}
			if(isset($this->status->FreakaZoneDevice->useModul->Underfloor1) &&
				$this->status->FreakaZoneDevice->useModul->Underfloor1) {
				$this->setUnderfloor(1);
			}
			if(isset($this->status->FreakaZoneDevice->useModul->Underfloor2) &&
				$this->status->FreakaZoneDevice->useModul->Underfloor2) {
				$this->setUnderfloor(2);
			}
			if(isset($this->status->FreakaZoneDevice->useModul->Underfloor3) &&
				$this->status->FreakaZoneDevice->useModul->Underfloor3) {
				$this->setUnderfloor(3);
			}
			if(isset($this->status->FreakaZoneDevice->useModul->Underfloor4) &&
				$this->status->FreakaZoneDevice->useModul->Underfloor4) {
				$this->setUnderfloor(4);
			}
			if(isset($this->status->FreakaZoneDevice->useModul->DS18B20) &&
				$this->status->FreakaZoneDevice->useModul->DS18B20) {
				$this->setDS18B20();
			}
			return $this->id;
		}
		return 0;
	}
	private function setDevice() {
		$this->mergeDivice();
	}
	private function setRSSI() {
		$id_mqtttopic = $this->insertTopic('info/WiFi/RSSI');
		$id_dp = $this->mergeDP($id_mqtttopic, 'Rssi', 'Signal', 'db', 0, -130, 0);
		$this->mergeTrend($id_dp, 'Signal', 120);
		echo "saved: 'Signal'<br />";
	}
	private function setOnline() {
		$id_mqtttopic = $this->insertTopic('ERROR/Online');
		$id_dp = $this->mergeDP($id_mqtttopic, 'Online', 'Online', '0:online;1:offline;');
		$this->mergeAlarm($id_dp, 'Online', 'Online');
		echo "saved: 'Online Error'<br />";
	}
	private function setNewUpdate() {
		$id_mqtttopic = $this->insertTopic('ERROR/NewVersion');
		$id_dp = $this->mergeDP($id_mqtttopic, 'NewVersion', 'Version', '0:aktuell;1:Neue Version;');
		$this->mergeAlarm($id_dp, 'NewVersion', 'Version', alarmtype::Meldung, AlarmCondition::gleich, 1);
		echo "saved: 'NewVersion'<br />";
	}
	private function setDHT() {
		$id_mqtttopic_temp = $this->insertTopic('Temperature');
		$id_dp_temp = $this->mergeDP($id_mqtttopic_temp, 'Temp', 'Temperatur', 'Â°C', 1, -50);
		$this->mergeTrend($id_dp_temp, 'Temperatur');
		echo "saved: 'Temperatur', ";
		$id_mqtttopic_hum = $this->insertTopic('Humidity');
		$id_dp_hum = $this->mergeDP($id_mqtttopic_hum, 'Hum', 'Feuchte', '%rF', 0);
		$this->mergeTrend($id_dp_hum, 'Feuchte');
		echo "saved: 'Feuchte', ";
		$id_mqtttopic_err = $this->insertTopic('ERROR/DHT');
		$id_dp_err = $this->mergeDP($id_mqtttopic_err, 'ERROR_DHT', 'HT Sensor Error', '0:Ok;1:Error;');
		$this->mergeAlarm($id_dp_err, 'ERROR_DHT', 'HT Sensor Error');
		echo "saved: 'HT Sensor Error'<br />";
	}
	private function setLDR() {
		$id_mqtttopic = $this->insertTopic('LDR');
		$id_dp = $this->mergeDP($id_mqtttopic, 'LDR', 'LDR', 'lux', 0, 0, 1024);
		$this->mergeTrend($id_dp, 'LDR', 30);
		echo "saved: 'LDR',";
		$id_mqtttopic_err = $this->insertTopic('ERROR/LDR');
		$id_dp_err = $this->mergeDP($id_mqtttopic_err, 'ERROR_LDR', 'LDR Sensor Error', '0:Ok;1:Error;');
		$this->mergeAlarm($id_dp_err, 'ERROR_LDR', 'LDR Sensor Error');
		echo "saved: 'LDR Sensor Error'<br />";
	}
	private function setLight() {
		$id_mqtttopic = $this->insertTopic('Light');
		$id_dp = $this->mergeDP($id_mqtttopic, 'Light', 'Licht', 'lux', 0, 0, 1024);
		$this->mergeTrend($id_dp, 'Licht', 30);
		echo "saved: 'Licht',";
		$id_mqtttopic_err = $this->insertTopic('ERROR/Licht');
		$id_dp_err = $this->mergeDP($id_mqtttopic_err, 'ERROR_Licht', 'Licht Sensor Error', '0:Ok;1:Error;');
		$this->mergeAlarm($id_dp_err, 'ERROR_Licht', 'Licht Sensor Error');
		echo "saved: 'Licht Sensor Error'<br />";
	}
	private function setBM() {
		$id_mqtttopic = $this->insertTopic('BM/Output');
		$id_dp = $this->mergeDP($id_mqtttopic, 'BM', 'Bewegung', '0:Stille;1:Bewegung;');
		$this->mergeTrend($id_dp, 'Bewegung', 0);

		$id_dp = $this->mergeDP($this->insertTopic('BM/Manual'), 'Manual', 'Automatikbetrieb', '0:Bewegungsmelder;1:fester Zustand;');
		$this->mergeAlarm($id_dp, 'Manual', 'Bewegungsmelder abgeschaltet', alarmtype::Meldung, AlarmCondition::gleich, 1);
		echo "saved: 'Bewegung'<br />";
	}
	private function setWindow() {
		$id_mqtttopic = $this->insertTopic('Window1');
		$id_dp = $this->mergeDP($id_mqtttopic, 'Window', 'Fenster', '0:geschlossen;1:offen;');
		$this->mergeAlarm($id_dp, 'Window', 'Fenster offen', alarmtype::Meldung, AlarmCondition::gleich, 1);
		$this->mergeTrend($id_dp, 'Fenster', 0);
		echo "saved: 'Fensterkontakt'<br />";
	}
	private function setWindow2() {
		$id_mqtttopic = $this->insertTopic('Window2');
		$id_dp = $this->mergeDP($id_mqtttopic, 'Window2', 'Fenster 2', '0:geschlossen;1:offen;');
		$this->mergeAlarm($id_dp, 'Window2', 'Fenster 2 offen', alarmtype::Meldung, AlarmCondition::gleich, 1);
		$this->mergeTrend($id_dp, 'Fenster 2', 0);
		echo "saved: 'Fensterkontakt 2'<br />";
	}
	private function setWindow3() {
		$id_mqtttopic = $this->insertTopic('Window3');
		$id_dp = $this->mergeDP($id_mqtttopic, 'Window3', 'Fenster 3', '0:geschlossen;1:offen;');
		$this->mergeAlarm($id_dp, 'Window3', 'Fenster 3 offen', alarmtype::Meldung, AlarmCondition::gleich, 1);
		$this->mergeTrend($id_dp, 'Fenster 3', 0);
		echo "saved: 'Fensterkontakt 3'<br />";
	}
	private function setWeight() {
		$id_mqtttopic = $this->insertTopic('Weight/Output');
		$id_dp = $this->mergeDP($id_mqtttopic, 'Weight', 'Gewicht', 'mg', 0);
		$this->mergeTrend($id_dp, 'Gewicht', 60);
		echo "saved: 'Gewicht',";
		$id_mqtttopic_err = $this->insertTopic('ERROR/Weight');
		$id_dp_err = $this->mergeDP($id_mqtttopic_err, 'ERROR_Weight', 'Weight Sensor Error', '0:Ok;1:Error;');
		$this->mergeAlarm($id_dp_err, 'ERROR_Weight', 'Weight Sensor Error');
		echo "saved: 'Gewicht Sensor Error'<br />";
	}
	private function setAnalogOut() {
		$id_mqtttopic = $this->insertTopic('AnalogOut/Output');
		$id_dp = $this->mergeDP($id_mqtttopic, 'AnalogOut', 'AnalogOut', '%', 0);
		$this->mergeTrend($id_dp, 'AnalogOut', 0);
		echo "saved: 'AnalogOut',";
		$id_mqtttopicHand = $this->insertTopic('AnalogOut/Hand');
		$this->mergeDP($id_mqtttopicHand, 'AnalogOutHand', 'AnalogOut Hand', '%', 0);
		echo "saved: 'AnalogOut Hand',";
		$id_mqtttopicAuto = $this->insertTopic('AnalogOut/Auto');
		$this->mergeDP($id_mqtttopicAuto, 'AnalogOutAuto', 'AnalogOut Auto', '%', 0);
		echo "saved: 'AnalogOut Auto',";
		$id_mqtttopicSetHand = $this->insertTopic('settings/AnalogOut/SetHand');
		$this->mergeDP($id_mqtttopicSetHand, 'AnalogOutSetHand', 'AnalogOut Set Hand', '0:Automatik;1:Hand;', 'NULL', 0, 1);
		echo "saved: 'AnalogOut Set Hand',";
		$id_mqtttopicHandValue = $this->insertTopic('settings/AnalogOut/SetHandValue');
		$this->mergeDP($id_mqtttopicHandValue, 'AnalogOutSetHandValue', 'AnalogOut SetHand Value', '%', 0);
		echo "saved: 'AnalogOut SetHand Value',";
		$id_mqtttopicHandError = $this->insertTopic('ERROR/AnalogOutHand');
		$id_dp_handError = $this->mergeDP($id_mqtttopicHandError, 'AnalogOutHandError', 'AnalogOut Hand Error', '0:Automatik;1:Hand;', 'NULL', 0, 1);
		$this->mergeAlarm($id_dp_handError, 'AnalogOutHandError', 'AnalogOut Hand Error', AlarmType::Handbetrieb);
		echo "saved: 'AnalogOut Hand Error',";
		if($this->status->FreakaZoneDevice->useModul->DHT11 ||
			$this->status->FreakaZoneDevice->useModul->DHT22 ||
			isset($this->status->FreakaZoneDevice->AnalogOut->CalcCycle)) {
				$id_mqtttopicKp = $this->insertTopic('settings/AnalogOut/Kp');
				$id_dp = $this->mergeDP($id_mqtttopicKp, 'AnalogOutKp', 'VerstÃ¤rkung', '', 1);
				echo "saved: 'VerstÃ¤rkung',";
				$id_mqtttopicTv = $this->insertTopic('settings/AnalogOut/Tv');
				$id_dp = $this->mergeDP($id_mqtttopicTv, 'AnalogOutTv', 'VerzÃ¶gerung', 's', 2);
				echo "saved: 'VerzÃ¶gerung',";
				$id_mqtttopicTn = $this->insertTopic('settings/AnalogOut/Tn');
				$id_dp = $this->mergeDP($id_mqtttopicTn, 'AnalogOutTn', 'Nachstellzeit', 's', 2);
				echo "saved: 'Nachstellzeit',";
				$id_mqtttopicSetPoint = $this->insertTopic('AnalogOut/SetPoint');
				$id_mqtttopicSetSetPoint = $this->insertTopic('settings/AnalogOut/SetPoint');
				$uint = 'Â°C';
				$nks = 1;
				if(isset($this->status->FreakaZoneDevice->AnalogOut->pidType) &&
					$this->status->FreakaZoneDevice->AnalogOut->pidType == 'AirCondition') { $uint = '%rF'; $nks = 0; }
				$id_dp = $this->mergeDP($id_mqtttopicSetPoint, 'AnalogOutSetPoint', 'Sollwert', $uint, $nks);
				$id_dp = $this->mergeDP($id_mqtttopicSetSetPoint, 'AnalogOutSetSetPoint', 'Sollwert', $uint, $nks);
				$this->mergeTrend($id_dp, 'AnalogOut SetPoint', 0);
				echo "saved: 'SetPoint',";
				$id_mqtttopicReadedTemp = $this->insertTopic('AnalogOut/ReadedTemp');
				$id_dp = $this->mergeDP($id_mqtttopicReadedTemp, 'AnalogOutReadedTemp', 'Temperatur', 'Â°C', 1);
				$this->mergeTrend($id_dp, 'AnalogOut ReadedTemp', 0);
				$id_mqtttopicSetWatung = $this->insertTopic('settings/AnalogOut/Wartung');
				$this->mergeDP($id_mqtttopicSetWatung, 'AnalogOut_SetWartung', 'AnalogOut Set Wartung', '0:inaktiv;1:aktiv;', 'NULL', 0, 1);
				echo "saved: 'AnalogOut Wartung',";
				$id_mqtttopicWartungError = $this->insertTopic('ERROR/AnalogOutWartungActive');
				$id_dp_WartungError = $this->mergeDP($id_mqtttopicWartungError, 'AnalogOut_Wartung', 'AnalogOut Wartung', '0:Wartung inaktiv;1:Wartung aktiv;', 'NULL', 0, 1);
				$this->mergeAlarm($id_dp_WartungError, 'AnalogOut_Wartung', 'AnalogOut Wartung', AlarmType::Meldung);
		}
		echo "saved: 'AnalogOut'<br />";
	}
	private function setAnalogOut2() {
		$id_mqtttopic = $this->insertTopic('AnalogOut2/Output');
		$id_dp = $this->mergeDP($id_mqtttopic, 'AnalogOut2', 'AnalogOut 2', '%', 0);
		$this->mergeTrend($id_dp, 'AnalogOut2', 0);
		echo "saved: 'AnalogOut 2',";
		$id_mqtttopicHand = $this->insertTopic('AnalogOut2/Hand');
		$this->mergeDP($id_mqtttopicHand, 'AnalogOut2Hand', 'AnalogOut 2 Hand', '%', 0);
		echo "saved: 'AnalogOut 2 Hand',";
		$id_mqtttopicAuto = $this->insertTopic('AnalogOut2/Auto');
		$this->mergeDP($id_mqtttopicAuto, 'AnalogOut2Auto', 'AnalogOut 2 Auto', '%', 0);
		echo "saved: 'AnalogOut 2 Auto',";
		$id_mqtttopicSetHand = $this->insertTopic('settings/AnalogOut2/SetHand');
		$this->mergeDP($id_mqtttopicSetHand, 'AnalogOut2SetHand', 'AnalogOut 2 Set Hand', '0:Automatik;1:Hand;', 'NULL', 0, 1);
		echo "saved: 'AnalogOut 2 Set Hand',";
		$id_mqtttopicHandValue = $this->insertTopic('settings/AnalogOut2/SetHandValue');
		$this->mergeDP($id_mqtttopicHandValue, 'AnalogOut2SetHandValue', 'AnalogOut 2 Set Hand Value', '%', 0);
		echo "saved: 'AnalogOut 2 Set Hand Value',";
		$id_mqtttopicHandError = $this->insertTopic('ERROR/AnalogOut2Hand');
		$id_dp_handError = $this->mergeDP($id_mqtttopicHandError, 'AnalogOut2HandError', 'AnalogOut 2 Hand Error', '0:Automatik;1:Hand;', 'NULL', 0, 1);
		$this->mergeAlarm($id_dp_handError, 'AnalogOut2HandError', 'AnalogOut 2 Hand Error', AlarmType::Handbetrieb);
		echo "saved: 'AnalogOut 2 Hand Error'<br />";
	}
	private function setNeoPixel() {
		$id_mqtttopicMaxPercent = $this->insertTopic('NeoPixel/MaxPercent');
		$id_mqtttopicR = $this->insertTopic('NeoPixel/R');
		$id_mqtttopicG = $this->insertTopic('NeoPixel/G');
		$id_mqtttopicB = $this->insertTopic('NeoPixel/B');
		$id_mqtttopicBrightness = $this->insertTopic('NeoPixel/Brightness');
		$id_mqtttopicModeName = $this->insertTopic('NeoPixel/ModeName');
		$id_mqtttopicDemo = $this->insertTopic('NeoPixel/Demo');
		$id_mqtttopicSleep = $this->insertTopic('NeoPixel/Sleep');
		$id_mqtttopicBorder = $this->insertTopic('NeoPixel/Border');
		$id_mqtttopicEffectSpeed = $this->insertTopic('NeoPixel/EffectSpeed');
		$this->mergeDP($id_mqtttopicMaxPercent, 'MaxPercent', 'Max Percent', '', 0);
		$this->mergeDP($id_mqtttopicR, 'R', 'R', '', 0);
		$this->mergeDP($id_mqtttopicG, 'G', 'G', '', 0);
		$this->mergeDP($id_mqtttopicB, 'B', 'B', '', 0);
		$this->mergeDP($id_mqtttopicBrightness, 'Brightness', 'Brightness', '%', 0);
		$this->mergeDP($id_mqtttopicModeName, 'ModeName', 'Mode Name', '', 0);
		$this->mergeDP($id_mqtttopicDemo, 'Demo', 'Demo', '0:inaktiv;1:aktiv;');
		$this->mergeDP($id_mqtttopicSleep, 'Sleep', 'Sleep', 'sec', 0);
		$this->mergeDP($id_mqtttopicBorder, 'Border', 'Border', '0:Aus;1:Ein;');
		$this->mergeDP($id_mqtttopicEffectSpeed, 'EffectSpeed', 'Effect Speed');
		echo "saved: 'NeoPixel'<br />";
	}
	private function setCwWw() {
		$id_mqtttopicManual = $this->insertTopic('CwWw/Manual');
		$id_mqtttopicMaxPercent = $this->insertTopic('CwWw/MaxPercent');
		$id_mqtttopicModeName = $this->insertTopic('CwWw/ModeName');
		$id_mqtttopicSleep = $this->insertTopic('CwWw/Sleep');
		$this->mergeDP($id_mqtttopicManual, 'Manual', 'Automatik', '0:Automatik;1:Hand;', 'NULL', 0, 1);
		$this->mergeDP($id_mqtttopicMaxPercent, 'MaxPercent', 'Max Percent', '', 0);
		$this->mergeDP($id_mqtttopicModeName, 'ModeName', 'Mode Name', '', 0);
		$this->mergeDP($id_mqtttopicSleep, 'Sleep', 'Sleep', 'sec', 0);
		echo "saved: 'CwWw'<br />";
	}
	private function setRelais($hasMoisture) {
		$id_mqtttopic = $this->insertTopic('Relais/Output');
		$id_dp = $this->mergeDP($id_mqtttopic, 'Pumpe', 'Pumpe', '0:Aus;1:Ein;');
		$this->mergeTrend($id_dp, 'Pumpe', 0);
		echo "saved: 'Pumpe',";
		$id_mqtttopicHand = $this->insertTopic('Relais/Hand');
		$this->mergeDP($id_mqtttopicHand, 'PumpeHand', 'Pumpe Hand', '0:Aus;1:Ein;', 'NULL', 0, 1);
		echo "saved: 'Pumpe Hand',";
		$id_mqtttopicAuto = $this->insertTopic('Relais/Auto');
		$this->mergeDP($id_mqtttopicAuto, 'PumpeAuto', 'Pumpe Auto', '0:Aus;1:Ein;', 'NULL', 0, 1);
		echo "saved: 'Pumpe Auto',";
		$id_mqtttopicSetHand = $this->insertTopic('settings/Relais/SetHand');
		$this->mergeDP($id_mqtttopicSetHand, 'PumpeSetHand', 'Pumpe Hand', '0:Automatik;1:Hand;', 'NULL', 0, 1);
		echo "saved: 'Pumpe Hand',";
		$id_mqtttopicHandValue = $this->insertTopic('settings/Relais/SetHandValue');
		$this->mergeDP($id_mqtttopicHandValue, 'PumpeSetHandValue', 'Pumpe Hand Value', '0:Aus;1:Ein;', 'NULL', 0, 1);
		echo "saved: 'Pumpe Hand Value',";
		$id_mqtttopicHandError = $this->insertTopic('ERROR/RelaisHand');
		$id_dp_handError = $this->mergeDP($id_mqtttopicHandError, 'PumpeHandError', 'Pumpe Hand Error', '0:Automatik;1:Hand;', 'NULL', 0, 1);
		$this->mergeAlarm($id_dp_handError, 'PumpeHandError', 'Pumpe Hand Error', AlarmType::Handbetrieb);
		echo "saved: 'Pumpe Hand Error',";
		if($hasMoisture) {
			$id_mqtttopicWaterEmpty = $this->insertTopic('ERROR/WaterEmpty');
			$id_dp_WaterEmpty = $this->mergeDP($id_mqtttopicWaterEmpty, 'WaterEmpty', 'Wasser leer', '0:OK;1:leer;', 'NULL', 0, 1);
			$this->mergeAlarm($id_dp_WaterEmpty, 'WaterEmpty', 'Wasser leer', AlarmType::Warnung);
			echo "saved: 'Wasser leer',";
		}
		echo "saved: 'Relais'<br />";
	}
	private function setUnderfloor($i) {
		$id_mqtttopic = $this->insertTopic('Underfloor' . $i . '/Output');
		$id_dp = $this->mergeDP($id_mqtttopic, 'Underfloor' . $i, 'Ventil ' . $i, '0:geschlossen;1:offen;');
		$this->mergeTrend($id_dp, 'Ventil ' . $i, 0);
		echo "saved: 'Ventil" . $i . "',";
		$id_mqtttopicHand = $this->insertTopic('Underfloor' . $i . '/Hand');
		$this->mergeDP($id_mqtttopicHand, 'Underfloor' . $i . '_Hand', 'Ventil ' . $i . ' Hand', '0:geschlossen;1:offen;', 'NULL', 0, 1);
		echo "saved: 'Ventil" . $i . " Hand',";
		$id_mqtttopicAuto = $this->insertTopic('Underfloor' . $i . '/Auto');
		$this->mergeDP($id_mqtttopicAuto, 'Underfloor' . $i . '_Auto', 'Ventil ' . $i . ' Auto', '0:geschlossen;1:offen;', 'NULL', 0, 1);
		echo "saved: 'Ventil" . $i . " Auto',";
		$id_mqtttopicSetHand = $this->insertTopic('settings/Underfloor' . $i . '/SetHand');
		$this->mergeDP($id_mqtttopicSetHand, 'Underfloor' . $i . '_SetHand', 'Ventil ' . $i . ' Set Hand', '0:Automatik;1:Hand;', 'NULL', 0, 1);
		echo "saved: 'Ventil" . $i . " Hand',";
		$id_mqtttopicHandValue = $this->insertTopic('settings/Underfloor' . $i . '/SetHandValue');
		$this->mergeDP($id_mqtttopicHandValue, 'Underfloor' . $i . '_SetHandValue', 'Ventil ' . $i . ' Set Hand Value', '0:geschlossen;1:offen;', 'NULL', 0, 1);
		echo "saved: 'Ventil" . $i . " Hand Value',";
		$id_mqtttopicHandError = $this->insertTopic('ERROR/Underfloor' . $i . 'Hand');
		$id_dp_handError = $this->mergeDP($id_mqtttopicHandError, 'Underfloor' . $i . '_HandError', 'Ventil ' . $i . ' Hand Error', '0:Automatik;1:Hand;', 'NULL', 0, 1);
		$this->mergeAlarm($id_dp_handError, 'Underfloor' . $i . '_HandError', 'Ventil ' . $i . ' Hand Error', AlarmType::Handbetrieb);
		echo "saved: 'Ventil" . $i . " Hand Error',";
		$id_mqtttopicReadedTemp = $this->insertTopic('Underfloor' . $i . '/ReadedTemp');
		$id_dp_ReadedTemp = $this->mergeDP($id_mqtttopicReadedTemp, 'Underfloor' . $i . '_ReadedTemp', 'gelesene Temperatur ' . $i, 'Â°C');
		$this->mergeTrend($id_dp_ReadedTemp, 'Temperatur ' . $i, 0);
		echo "saved: 'ReadedTemp" . $i . "',";
		$id_mqtttopicSetpoint = $this->insertTopic('Underfloor' . $i . '/SetPoint');
		$this->mergeDP($id_mqtttopicSetpoint, 'Underfloor' . $i . '_SetPoint', 'Ventil ' . $i . ' SetPoint', 'Â°C', 1, 0, 26);
		echo "saved: 'Ventil" . $i . " SetPoint',";
		$id_mqtttopicSetSetpoint = $this->insertTopic('settings/Underfloor' . $i . '/SetPoint');
		$id_dp_SetSetPoint = $this->mergeDP($id_mqtttopicSetSetpoint, 'Underfloor' . $i . '_SetSetPoint', 'Ventil ' . $i . ' SetSetPoint', 'Â°C', 1, 0, 26);
		$this->mergeTrend($id_dp_SetSetPoint, 'SetPoint ' . $i, 0);
		echo "saved: 'Ventil" . $i . " SetSetPoint',";
		$id_mqtttopicTempURL = $this->insertTopic('Underfloor' . $i . '/TempURL');
		$this->mergeDP($id_mqtttopicTempURL, 'Underfloor' . $i . '_TempURL', 'Ventil ' . $i . ' TempURL');
		echo "saved: 'Ventil" . $i . " TempURL',";
		$id_mqtttopicSetTempURL = $this->insertTopic('settings/Underfloor' . $i . '/TempURL');
		$this->mergeDP($id_mqtttopicSetTempURL, 'Underfloor' . $i . '_SetTempURL', 'Ventil ' . $i . ' SetTempURL');
		echo "saved: 'Ventil" . $i . " SetTempURL',";
		$id_mqtttopicSetWatung = $this->insertTopic('settings/Underfloor' . $i . '/Wartung');
		$this->mergeDP($id_mqtttopicSetWatung, 'Underfloor' . $i . '_SetWartung', 'Ventil ' . $i . ' Set Wartung', '0:inaktiv;1:aktiv;', 'NULL', 0, 1);
		echo "saved: 'Ventil" . $i . " Wartung',";
		$id_mqtttopicWartungError = $this->insertTopic('ERROR/Underfloor' . $i . 'WartungActive');
		$id_dp_WartungError = $this->mergeDP($id_mqtttopicWartungError, 'Underfloor' . $i . '_Wartung', 'Ventil ' . $i . ' Wartung', '0:Wartung inaktiv;1:Wartung aktiv;', 'NULL', 0, 1);
		$this->mergeAlarm($id_dp_WartungError, 'Underfloor' . $i . '_Wartung', 'Ventil ' . $i . ' Wartung', AlarmType::Meldung);
		echo "saved: 'Ventil" . $i . " Wartung',";
		echo "saved: 'Underfloor" . $i . "'<br />";
	}
	private function setDS18B20() {
		$count = $this->status->FreakaZoneDevice->DS18B20->Count;
		for($i = 0; $i < $count; $i++) {
			$id_mqtttopic_temp = $this->insertTopic('DS18B20/deviceOneWire' . ($i + 1) . '/Temperature');
			$id_dp_temp = $this->mergeDP($id_mqtttopic_temp, 'Temp' . ($i + 1), 'Temperatur ' . ($i + 1), 'Â°C', 1, -50);
			$this->mergeTrend($id_dp_temp, 'Temperatur ' . ($i + 1));
			echo "saved: 'Temperatur " . $i . "', ";
		}
	}
	private function setRain() {
		$id_mqtttopic = $this->insertTopic('Rain');
		$id_dp = $this->mergeDP($id_mqtttopic, 'Rain', 'Regen', 'l/min', 3, 0, 10);
		$this->mergeTrend($id_dp, 'Regen');
		echo "saved: 'Regen',";
		$id_mqtttopic_err = $this->insertTopic('ERROR/Rain');
		$id_dp_err = $this->mergeDP($id_mqtttopic_err, 'ERROR_Rain', 'Regen Sensor Error', '0:Ok;1:Error;');
		$this->mergeAlarm($id_dp_err, 'ERROR_Rain', 'Regen Sensor Error');
		echo "saved: 'Regen Sensor Error'<br />";
	}
	private function setVolume() {
		$id_mqtttopic = $this->insertTopic('Volume');
		$id_dp = $this->mergeDP($id_mqtttopic, 'Vol', 'FÃ¼llstand', 'l', 0, 0, 10000);
		$this->mergeTrend($id_dp, 'FÃ¼llstand');
		echo "saved: 'FÃ¼llstand',";
		$id_mqtttopic_err = $this->insertTopic('ERROR/Distance');
		$id_dp_err = $this->mergeDP($id_mqtttopic_err, 'ERROR_Distance', 'Volume Sensor Error', '0:Ok;1:Error;');
		$this->mergeAlarm($id_dp_err, 'ERROR_Distance', 'Volume Sensor Error');
		echo "saved: 'Volume Sensor Error'<br />";
	}
	private function setMoisture() {
		$id_mqtttopic = $this->insertTopic('Moisture');
		$id_dp = $this->mergeDP($id_mqtttopic, 'Moisture', 'Moisture', '%', 0);
		$this->mergeTrend($id_dp, 'Moisture');
		echo "saved: 'Moisture', ";
		$id_mqtttopic_errmin = $this->insertTopic('ERROR/MoistureMin');
		$id_dp_errmin = $this->mergeDP($id_mqtttopic_errmin, 'ERROR_MoistureMin', 'Pflanze zu trocken', '0:Ok;1:zu trocken;');
		$this->mergeAlarm($id_dp_errmin, 'ERROR_MoistureMin', 'Pflanze zu trocken', alarmtype::Warnung);
		$id_mqtttopic_err = $this->insertTopic('ERROR/Moisture');
		$id_dp_err = $this->mergeDP($id_mqtttopic_err, 'ERROR_Moisture', 'Moisture Sensor Error', '0:Ok;1:Error;');
		$this->mergeAlarm($id_dp_err, 'ERROR_Moisture', 'Moisture Sensor Error');
		echo "saved: 'Moisture Sensor Error'<br />";
	}
	private function setImpulseCounter() {
		$id_mqtttopic = $this->insertTopic('ImpulseCounter/KWh');
		$this->mergeDP($id_mqtttopic, 'KWh', 'ZÃ¤hlerstand', 'KWh', 0);
		echo "saved: 'KWh'<br />";
	}
	private function mergeDivice($active = 1) {
		$sql = "
MERGE INTO [d1mini] AS [TARGET]
	USING (
		VALUES (
			$this->idD1MiniGroup, '$this->name', '$this->description',
			'$this->version', '$this->ip', '$this->mac', $active
		)
	) AS [SOURCE] (
			[id_d1minigroup], [name], [description],
			[version], [ip], [mac], [active]
	) ON
		[TARGET].[mac] = [SOURCE].[mac]
	WHEN MATCHED THEN
		UPDATE SET
			[TARGET].[id_d1minigroup] = [SOURCE].[id_d1minigroup],
			[TARGET].[name] = [SOURCE].[name],
			[TARGET].[description] = [SOURCE].[description],
			[TARGET].[version] = [SOURCE].[version],
			[TARGET].[ip] = [SOURCE].[ip],
			[TARGET].[active] = [SOURCE].[active]
	WHEN NOT MATCHED THEN
		INSERT (
			[id_d1minigroup], [name], [description],
			[version], [ip], [mac], [active]
		)
		VALUES (
			[SOURCE].[id_d1minigroup], [SOURCE].[name], [SOURCE].[description],
			[SOURCE].[version], [SOURCE].[ip], [SOURCE].[mac], [SOURCE].[active]
		)
	OUTPUT [INSERTED].[id_d1mini] AS [ID];";
		$this->database->query($sql);
		$this->id = $this->database->fetch()['ID'];
	}
	private function insertTopic($aptopic) {
		$sql = "
MERGE INTO [mqtttopic] AS [TARGET]
	USING (
		VALUES (
			" . $this->idMqttGroup . ", " . $this->id . ",'" . $this->name . "/" . $aptopic . "'
		)
	) AS [SOURCE] (
			[id_mqttgroup], [id_d1mini], [topic]
	) ON
		[TARGET].[topic] = [SOURCE].[topic]
	WHEN MATCHED THEN
		UPDATE SET
			[TARGET].[id_mqttgroup] = [SOURCE].[id_mqttgroup],
			[TARGET].[id_d1mini] = [SOURCE].[id_d1mini],
			[TARGET].[topic] = [SOURCE].[topic]
	WHEN NOT MATCHED THEN
		INSERT (
			[id_mqttgroup], [id_d1mini], [topic]
		)
		VALUES (
			[SOURCE].[id_mqttgroup], [SOURCE].[id_d1mini], [SOURCE].[topic]
		)
	OUTPUT [INSERTED].[id_mqtttopic] AS [ID];";
		$this->database->query($sql);
		return $this->database->fetch()['ID'];
	}
	private function mergeDP($idtopic, $apname, $apdesc, $unit = 'NULL', $nks = 'NULL', $min = 0, $max = 100, $active = 1) {
		$sql = "
MERGE INTO [dp] AS [TARGET]
	USING (
		VALUES (
			$this->idDBGroup, $idtopic, '" . $this->name . "_" . $apname . "', '$this->description $apdesc',
			'$unit', $nks, $min, $max, $active
		)
	) AS [SOURCE] (
			[id_dpgroup], [id_mqtttopic], [name], [description],
			[unit], [nks], [min], [max], [active]
	) ON
		[TARGET].[name] = [SOURCE].[name]
	WHEN MATCHED THEN
		UPDATE SET
			[TARGET].[id_dpgroup] = [SOURCE].[id_dpgroup],
			[TARGET].[id_mqtttopic] = [SOURCE].[id_mqtttopic],
			[TARGET].[description] = [SOURCE].[description],
			[TARGET].[unit] = [SOURCE].[unit],
			[TARGET].[nks] = [SOURCE].[nks],
			[TARGET].[min] = [SOURCE].[min],
			[TARGET].[max] = [SOURCE].[max],
			[TARGET].[active] = [SOURCE].[active]
	WHEN NOT MATCHED THEN
		INSERT (
			[id_dpgroup], [id_mqtttopic], [name], [description],
			[unit], [nks], [min], [max], [active]
		)
		VALUES (
			[SOURCE].[id_dpgroup], [SOURCE].[id_mqtttopic], [SOURCE].[name], [SOURCE].[description],
			[SOURCE].[unit], [SOURCE].[nks], [SOURCE].[min], [SOURCE].[max], [SOURCE].[active]
		)
	OUTPUT [INSERTED].[id_dp] AS [ID];";
			$this->database->query($sql);
			return $this->database->fetch()['ID'];
	}
	private function mergeTrend($id_dp, $apdesc, $intervall = 60, $active = 1) {
		$sql = "
MERGE INTO [trend] AS [TARGET]
	USING (
		VALUES (
			$id_dp, $this->idTrendGroup, '$this->description $apdesc', $intervall, $active
		)
	) AS [SOURCE] (
		[id_dp], [id_trendgroup], [name], [intervall], [active]
	) ON
		[TARGET].[id_dp] = [SOURCE].[id_dp]
	WHEN MATCHED THEN
		UPDATE SET
			[TARGET].[id_trendgroup] = [SOURCE].[id_trendgroup],
			[TARGET].[name] = [SOURCE].[name],
			[TARGET].[intervall] = [SOURCE].[intervall],
			[TARGET].[active] = [SOURCE].[active]
	WHEN NOT MATCHED THEN
		INSERT (
			[id_dp], [id_trendgroup],
			[name], [intervall], [active]
		)
		VALUES (
			[SOURCE].[id_dp], [SOURCE].[id_trendgroup],
			[SOURCE].[name], [SOURCE].[intervall], [SOURCE].[active]
		);";
		$this->database->query($sql);
	}
	private function mergeAlarm($id_dp, $apname, $apdesc, $alarmtype = 1, $alarmcondition = 1, $min = 1) {
		$sql = "
MERGE INTO [alarm] AS [TARGET]
	USING (
		VALUES (
			$id_dp, $this->idAlarmGroup, '$this->description $apdesc',
			$this->idAlarmGroups5, $this->idAlarmGroups4, $this->idAlarmGroups3, $this->idAlarmGroups2, $this->idAlarmGroups1,
			$alarmtype, $alarmcondition, $min
		)
	) AS [SOURCE] (
		[id_dp], [id_alarmgroup], [text],
		[id_alarmgroups5], [id_alarmgroups4], [id_alarmgroups3], [id_alarmgroups2], [id_alarmgroups1],
		[id_alarmtype], [id_alarmcondition], [min]
	) ON
		[TARGET].[id_dp] = [SOURCE].[id_dp]
	WHEN MATCHED THEN
		UPDATE SET
			[TARGET].[text] = [SOURCE].[text],
			[TARGET].[id_alarmtype] = [SOURCE].[id_alarmtype],
			[TARGET].[id_alarmcondition] = [SOURCE].[id_alarmcondition],
			[TARGET].[min] = [SOURCE].[min]
	WHEN NOT MATCHED THEN
		INSERT (
			[id_dp], [id_alarmgroup], [text],
			[id_alarmgroups5], [id_alarmgroups4], [id_alarmgroups3], [id_alarmgroups2], [id_alarmgroups1],
			[id_alarmtype], [id_alarmcondition], [min]
		)
		VALUES (
			[SOURCE].[id_dp], [SOURCE].[id_alarmgroup], [SOURCE].[text],
			[SOURCE].[id_alarmgroups5], [SOURCE].[id_alarmgroups4], [SOURCE].[id_alarmgroups3], [SOURCE].[id_alarmgroups2], [SOURCE].[id_alarmgroups1],
			[SOURCE].[id_alarmtype], [SOURCE].[id_alarmcondition], [SOURCE].[min]
		);";
			$this->database->query($sql);
	}
}

class AlarmType {
	const Alarm = 1;
	const StÃ¶rung = 2;
	const Meldung = 3;
	const Handbetrieb = 4;
	const Nothandebene = 5;
	const Warnung = 6;
}
class AlarmCondition {
	const gleich = 1;
	const ungleich = 2;
	const groesser = 3;
	const kleiner = 4;
	const minmax = 5;
	const zwischen = 6;
}
?>
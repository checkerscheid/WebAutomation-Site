<?
//###################################################################################
//#                                                                                 #
//#              (C) FreakaZone GmbH                                                #
//#              =======================                                            #
//#                                                                                 #
//###################################################################################
//#                                                                                 #
//# Author       : Christian Scheid                                                 #
//# Date         : 21.07.2014                                                       #
//#                                                                                 #
//# Revision     : $Rev:: 631                                                     $ #
//# Author       : $Author::                                                      $ #
//# File-ID      : $Id:: openWeather.psys 631 2024-06-29 12:29:38Z                $ #
//#                                                                                 #
//###################################################################################
namespace system\Helper;
use DateTime;
use system\wpInit;
class openWeather {
	private const urlprepend = 'http://api.openweathermap.org/data/2.5/';
	private static $instance;
	private $urlappend;
	private $debug = false;
	private $weatherdata;
	private $forecastdata;
	public function __construct() {
		$this->urlappend = '?id=' . wpInit::$weathercode . '&APPID=' . wpInit::$weatherkey . '&units=metric&lang=de';
		$this->weatherdata = $this->getData('weather');
		$this->forecastdata = $this->getData('forecast');
	}
	public static function getInstance() {
		if(!isset(self::$instance)) {
			self::$instance = new self;
		}
		return self::$instance;
	}
	private function getData($what) {
		$returns = '{}';
		$filename = 'system\Helper\open' . $what . 'example.json';
		if(!file_exists($filename)) {
			//echo '/* ' . $what . ' file not exists, load from web */';
			\file_put_contents($filename,
				\file_get_contents(self::urlprepend . $what . $this->urlappend));
		}
		if($this->debug) {
			///echo '/* Debug ' . $what . '-data */';
			$returns = \file_get_contents($filename);
		} else {
			$now = new DateTime();
			$oneHour = 60 * 60;
			$filetime = \filemtime($filename) + $oneHour;
			if($now->getTimestamp() > $filetime) {
				echo '/* ' . $what . ' file is older than 1 hour (' . $now->getTimestamp() . ', ' . $filetime . '), load from web */';
				\file_put_contents($filename,
					\file_get_contents(self::urlprepend . $what . $this->urlappend));
			}
			//echo '/* load from ' . $what . '-file */';
			$returns = \file_get_contents($filename);
		}
		return $returns;
	}
	public static function getWeather() {
		$ow = openWeather::getInstance();
		$con = json_decode($ow->weatherdata);
		echo '
			<div style="background:transparent url('.self::getIcon($con->weather[0]->icon).') left top no-repeat" title="'.$con->weather[0]->description.'">

				<p class="big">'.$con->main->temp.' <sup>째C</sup></p>
				<p class="location">'.$con->name.'</p>

				<p class="wind">'.$con->wind->speed.' m / s
				<img alt="" src="images/layout/wind.png" style="transform:rotate('.$con->wind->deg.'deg);" title="Richtung: '.self::getwind($con->wind->deg).'" /></p>
				<p class="atm">'.$con->main->humidity.' %rF,  '.$con->main->pressure.' mbar</p>
				<p class="sonne">
					<span class="sunrise" title="Sonnenaufgang">'.wpHTML_EMPTY.'</span><span>'.self::getTime($con->sys->sunrise).' Uhr</span>
					<span class="sunset" title="Sonnenuntergang">'.wpHTML_EMPTY.'</span><span>'.self::getTime($con->sys->sunset).' Uhr</span>
				</p>
				<div class="clearboth"></div>
			</div>';
	}
	public static function getForecast() {
		$ow = openWeather::getInstance();
		$con = json_decode($ow->forecastdata);
		$aktdt = '';
		for($i = 0; $i < $con->cnt; $i++) {
			$akt = $con->list[$i];
			if(self::convertDate($akt->dt, false) != $aktdt) {
				echo '<div class="clearboth"><h4>'.self::convertDate($akt->dt, false).'</h4></div>';
				if(self::getTime($akt->dt) != '01:00' && self::getTime($akt->dt) != '02:00') {
					echo self::getEmptyForecast($akt->dt);
				}
				$aktdt = self::convertDate($akt->dt, false);
			}
			$rain = 0;
			if($akt->weather[0]->main == 'Rain') {
				$rain = $akt->rain->{'3h'};
			}
			echo '
			<div class="dayscontainer" id="dt' . $akt->dt . '">
				<div class="days">
					<h4>'.self::getTime($akt->dt).'</h4>
					<img alt="'.$akt->weather[0]->description.'" title="'.$akt->weather[0]->description.'" src="'.self::getIcon($akt->weather[0]->icon).'" /><br />
					<span class="high">'.$akt->main->temp_max.' 째C</span><br />
					<span class="ps-bold">'.$akt->main->temp.' 째C</span><br />
					<span class="low">'.$akt->main->temp_min.' 째C</span><br />
					<table summary="">
						<tbody>
							<tr>
								<td class="l"><span>Regen:</span></td>
								<td class="r"><span>'.$rain.' l/min</span></td>
							</tr>
							<tr>
								<td class="l"><span>Feuchte:</span></td>
								<td class="r"><span>'.$akt->main->humidity.' %rF</span></td>
							</tr>
							<tr>
								<td class="l"><span>Wolken:</span></td>
								<td class="r"><span>'.$akt->clouds->all.' %</span></td>
							</tr>
							<tr>
								<td class="l"><span>Wind:</span></td>
								<td class="r"><span>'.$akt->wind->speed.' m / s</span></td>
							</tr>
							<tr>
								<td colspan="2">
<img alt="" class="wind" src="images/layout/wind.png" style="transform:rotate('.$akt->wind->deg.'deg);" title="Richtung: '.self::getwind($akt->wind->deg).'" />
								</td>
							</tr>
							<tr>
								<td colspan="2"><span>'.$akt->main->pressure.' mbar</span></td>
							</tr>
						</tbody>
					</table>
				</div>
			</div>';
		}
		echo '
				<div class="clearboth"></div>';
	}
	public static function getForecastLines() {
		header(wpJSON_HEADER);
		$ow = openWeather::getInstance();
		$con = json_decode($ow->forecastdata);
		$dataTemp = "[";
		$dataTempMin = "[";
		$dataTempMax = "[";
		$dataHumidity = "[";
		$dataRain = "[";
		$dataCloud = "[";
		for($i = 0; $i < $con->cnt; $i++) {
			$akt = $con->list[$i];
			$dataTemp .= '[' . $akt->dt . ',' . $akt->main->temp . ']' . ($i < $con->cnt - 1 ? ',' : '');
			$dataTempMin .= '[' . $akt->dt . ',' . $akt->main->temp_min . ']' . ($i < $con->cnt - 1 ? ',' : '');
			$dataTempMax .= '[' . $akt->dt . ',' . $akt->main->temp_max . ']' . ($i < $con->cnt - 1 ? ',' : '');
			$dataHumidity .= '[' . $akt->dt . ',' . $akt->main->humidity . ']' . ($i < $con->cnt - 1 ? ',' : '');
			$dataCloud .= '[' . $akt->dt . ',' . (100 - $akt->clouds->all) . ']' . ($i < $con->cnt - 1 ? ',' : '');
			$rain = 0;
			if($akt->weather[0]->main == 'Rain') {
				$rain = $akt->rain->{'3h'};
			}
			$dataRain .= '[' . $akt->dt . ',' . $rain . ']' . ($i < $con->cnt - 1 ? ',' : '');
		}
		echo '{';
		echo '"Temp":' . $dataTemp . '],';
		echo '"TempMin":' . $dataTempMin . '],';
		echo '"TempMax":' . $dataTempMax . '],';
		echo '"Humidity":' . $dataHumidity . '],';
		echo '"Rain":' . $dataRain . '],';
		echo '"Cloud":' . $dataCloud . ']';
		echo '}';
	}
	private static function getIcon($icon) {
		if($icon != '') {
			$output = $_SERVER['DOCUMENT_ROOT'].'/images/cache/'.$icon.'.png';
			if(!file_exists($output)) {
				$input = 'http://openweathermap.org/img/w/'.$icon.'.png';
				file_put_contents($output, file_get_contents($input));
			}
		}
		return 'images/cache/'.$icon.'.png';
	}
	private static function convertDate($unixtime, $usetime = true) {
		$dt = new \DateTime();
		$dt->setTimestamp($unixtime);
		if($usetime) return $dt->format('d.m H:i');
		else return self::$wochentage[$dt->format('N')].', '.$dt->format('d.m');
	}
	private static function getTime($unixtime) {
		$dt = new \DateTime();
		$dt->setTimestamp($unixtime);
		return $dt->format('H:i');
	}
	private static function getEmptyForecast($aktTime) {
		$empty = 0;
		$returns = '';
		switch(self::getTime($aktTime)) {
			case '22:00': case '23:00': $empty = 7; break;
			case '19:00': case '20:00': $empty = 6; break;
			case '16:00': case '17:00': $empty = 5; break;
			case '13:00': case '14:00': $empty = 4; break;
			case '10:00': case '11:00': $empty = 3; break;
			case '07:00': case '08:00': $empty = 2; break;
			case '04:00': case '05:00': $empty = 1; break;
		}
		for($iempty = 1; $iempty <= $empty; $iempty++) { $returns .= '<div class="daysempty"></div>'; }
		return $returns;
	}
	private static function getWind($wind_direction) {
		if($wind_direction > 348.75 && $wind_direction < 11.25) {
			$wind_direction_converted = "N";
		} else if($wind_direction > 11.25 && $wind_direction < 33.75) {
			$wind_direction_converted = "NNO";
		} else if($wind_direction > 33.75 && $wind_direction < 56.25) {
			$wind_direction_converted = "NO";
		} else if($wind_direction > 56.25 && $wind_direction < 78.75) {
			$wind_direction_converted = "ONO";
		} else if($wind_direction > 78.75 && $wind_direction < 101.25) {
			$wind_direction_converted = "O";
		} else if($wind_direction > 101.25 && $wind_direction < 123.75) {
			$wind_direction_converted = "OSO";
		} else if($wind_direction > 123.75 && $wind_direction < 146.25) {
			$wind_direction_converted = "SO";
		} else if($wind_direction > 146.25 && $wind_direction < 168.75) {
			$wind_direction_converted = "SSO";
		} else if($wind_direction > 168.75 && $wind_direction < 191.25) {
			$wind_direction_converted = "S";
		} else if($wind_direction > 191.25 && $wind_direction < 213.75) {
			$wind_direction_converted = "SSW";
		} else if($wind_direction > 213.75 && $wind_direction < 236.25) {
			$wind_direction_converted = "SW";
		} else if($wind_direction > 236.25 && $wind_direction < 258.75) {
			$wind_direction_converted = "WSW";
		} else if($wind_direction > 258.75 && $wind_direction < 281.25) {
			$wind_direction_converted = "W";
		} else if($wind_direction > 281.25 && $wind_direction < 303.75) {
			$wind_direction_converted = "WNW";
		} else if($wind_direction > 303.75 && $wind_direction < 326.25) {
			$wind_direction_converted = "NW";
		} else if($wind_direction > 326.25 && $wind_direction < 348.75) {
			$wind_direction_converted = "NNW";
		} else $wind_direction_converted = "";
		return $wind_direction_converted;
	}
	private static $wochentage = array(
		1 => 'Montag',
		2 => 'Dienstag',
		3 => 'Mittwoch',
		4 => 'Donnerstag',
		5 => 'Freitag',
		6 => 'Samstag',
		7 => 'Sonntag'
	);
}

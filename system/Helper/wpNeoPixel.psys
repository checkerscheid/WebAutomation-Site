<?
//###################################################################################
//#                                                                                 #
//#              (C) FreakaZone GmbH                                                #
//#              =======================                                            #
//#                                                                                 #
//###################################################################################
//#                                                                                 #
//# Author       : Christian Scheid                                                 #
//# Date         : 01.08.2024                                                       #
//#                                                                                 #
//# Revision     : $Rev:: 713                                                     $ #
//# Author       : $Author::                                                      $ #
//# File-ID      : $Id:: wpNeoPixel.psys 713 2024-12-14 16:26:31Z                 $ #
//#                                                                                 #
//###################################################################################
namespace system\Helper;
use system\WebCom;
//use system\std;
//use system\Helper\security;
/**
 * generiert die Oberfläche für die Neopixel erweiterung auf dem D1 Mini
 * @author Checker
 */
class wpNeoPixel {
	private $database, $status, $pixelStatus;
	private $ip, $name;
	const modes = array(
		0 => 'Set Color',
		1 => 'Color Wipe',
		2 => 'Theater Chase',
		3 => 'Rainbow',
		4 => 'Rainbow Wheel',
		5 => 'Theater Chase Rainbow',
		6 => 'Runner',
		7 => 'Random'
	);
	public function __construct($ip, $name) {
		$this->database = new wpDatabase();
		$this->ip = $ip;
		$this->name = $name;
		//$this->getStatus();
		//$this->getPixelStatus();
	}
	public function getStatus() {
		$returns = true;
		$WebCom = new WebCom();
		$res = $WebCom->send('getD1MiniStatus', $this->ip);
		$jsonres = \json_decode($res);
		if(\json_last_error() != JSON_ERROR_NONE) {
			echo '<!-- Json Error: ' . \json_last_error_msg() . '-->';
			echo $res;
			$returns = false;
		}
		if(isset($jsonres->FreakaZoneDevice)) {
			$this->status = $jsonres->FreakaZoneDevice;
		}
		//std::test_array($this->status, 'getStatus');
		return $returns;
	}
	public function getStatusFromJson($json) {
		$this->status = $json;
		//std::test_array($this->status, 'getStatusFromJson');
	}
	private function getPixelStatus() {
		$WebCom = new WebCom();
		$this->pixelStatus = \json_decode($WebCom->send('getD1MiniNeoPixelStatus', $this->ip), true);
		//std::test_array($this->pixelStatus, 'getPixelStatus');
	}
	public function getColorPicker($headline = 'NeoPixel') {
		$r = $this->status->NeoPixel->ValueR ?? 0;
		$g = $this->status->NeoPixel->ValueG ?? 0;
		$b = $this->status->NeoPixel->ValueB ?? 0;
		//$br = $this->status->NeoPixel->Brightness ?? 0;
		$pc = $this->status->NeoPixel->PixelCount ?? 0;
?>
		<div class="wpNeoPixel ps-container" data-ip="<?=$this->ip ?>">
<?
		if(!isset($this->status)) {
			echo '<h1 class="ps-fontred">--- OFFLINE ---</h1><hr />';
		}
?>
			<h3><?=$headline ?> Farben</h3>
			<hr />
			<div class="colorPicker">
				<span class="NeoPixelColorPreview" style="background-color:rgb(<?=$r ?>, <?=$g ?>, <?=$b ?>);"><?=wpHTML_EMPTY ?></span>
				<span class="ps-button ps-pluginbutton MakeFavColor" title="als Favorit speichern">&#10004;</span>
				<span class="ps-button ps-pluginbutton DeleteFavColor" title="Alle Favoriten löschen">&#10008;</span>
				<div<?=(security::checkGroup(security::entwickler) ? '' : ' class="ps-hidden"') ?>>
					<input type="text" class="ps-input NeoPixelColor NeoPixelR" placeholder="Red 0 - 255" value="<?=$r ?>" />
					<input type="text" class="ps-input NeoPixelColor NeoPixelG" placeholder="Green 0 - 255" value="<?=$g ?>" />
					<input type="text" class="ps-input NeoPixelColor NeoPixelB" placeholder="Blue 0 - 255" value="<?=$b ?>" />
				</div>
				<hr />
				<div class="NeoPixelSavedColor ps-flex-container">
				</div>
				<!--hr />
				<h3>Brightness (<span class="NeoPixelBr"><?/*=round($br / 2.55)*/ ?></span> %)</h3>
				<div class="NeoPixelSliderW NeoPixelSliderBr wpSlider-255" data-ws="<?/*=$this->name*/ ?>_Brightness"></div-->
				<hr />
				<span class="ps-button NeoPixelColorManagement">Color Management</span>
				<span class="ps-button setNeoPixelOff">Aus</span>
				<div class="colorManagement">
					<div class="NeoPixelSlider NeoPixelSliderR wpSlider" data-ws="<?=$this->name ?>_R"></div>
					<div class="NeoPixelSlider NeoPixelSliderG wpSlider" data-ws="<?=$this->name ?>_G"></div>
					<div class="NeoPixelSlider NeoPixelSliderB wpSlider" data-ws="<?=$this->name ?>_B"></div>
					<hr />
					<div class="ps-flex-container">
						<div class="pickerContainer">
							<canvas id="picker" width="200" height="200"></canvas>
						</div>
						<div>
							<span class="ps-button setNeoPixelOffRunner">Aus Runner</span><br />
							<span class="ps-input <?=wpa::GreyGreen?>" data-ws="<?=$this->name ?>_Border">-</span><br />
							<span class="ps-button setNeoPixelBorder">Border</span>
						</div>
					</div>
					<div class="ps-flex-container<?=(security::checkGroup(security::entwickler) ? '' : ' ps-hidden') ?>">
<?
		for($i = 0; $i < $pc; $i++) {
?>
						<div class="colorBorderContainer">
							<div class="colorBorder" data-led="<?=($i)?>" title="<?=($i)?>"
								style="background-color: rgb(<?=$this->pixelStatus['p' . $i]['r'] ?>, <?=$this->pixelStatus['p' . $i]['g'] ?>, <?=$this->pixelStatus['p' . $i]['b'] ?>);"></div>
						</div>
<?
		}
?>
					</div>
				</div>
<?
			$ao = $this->status->useModul->AnalogOut ?? false;
			$ao2 = $this->status->useModul->AnalogOut2 ?? false;
			if($ao || $ao2) {
?>
				<hr />
				<? if($ao) { ?>
				<h3>Warmweiß (<span class="NeoPixelWW"><?=$this->status->AnalogOut->HandValue ?></span> %)</h3>
				<div class="NeoPixelSliderW NeoPixelSliderWW wpSlider" data-ws="<?=$this->name ?>_AnalogOut"></div>
				<? } ?>
				<? if($ao2) { ?>
				<h3>Kaltweiß (<span class="NeoPixelCW"><?=$this->status->AnalogOut2->HandValue ?></span> %)</h3>
				<div class="NeoPixelSliderW NeoPixelSliderCW wpSlider" data-ws="<?=$this->name ?>_AnalogOut2"></div>
				<? } ?>
<?
			}
?>
			</div>
		</div>
<?
	}
	public function getColorScenen($headline = 'NeoPixel') {
?>
		<div class="wpNeoPixel ps-container" data-ip="<?=$this->ip ?>">
<?
		if(!isset($this->status)) {
			echo '<h1 class="ps-fontred">--- OFFLINE ---</h1><hr />';
		}
?>
			<h3><?=$headline ?> Scenen</h3>
			<hr />
			<div class="sceneContainer">
				<div>
					<span class="ps-input NeoPixelModeName" data-ws="<?=$this->name ?>_ModeName">-</span><br />
					<span class="ps-button setNeoPixelDemo">Demo Mode</span>
				</div>
				<div>
					<h3>Effect Speed</h3>
					<div class="NeoPixelSliderEffectSpeed wpSlider" data-ws="<?=$this->name ?>_EffectSpeed"></div>
<?
		foreach(self::modes as $id => $name) {
?>
					<span class="ps-button setNeoPixelEffect" data-id="<?=$id ?>"><?=$name ?></span><br />
<?
		}
?>
				</div>
				<hr />
				<div>
					<h3>Sleeptimer:</h3>
					<span class="ps-input <?=wpa::SecToTime ?>" data-ws="<?=$this->name ?>_Sleep">-</span>
					<div class="ps-flex-container">
						<div>
							<span class="ps-input NeoPixelSleepHour">0</span> <span class="NeoPixelSleepUnit">h</span>
							<div class="NeoPixelSleepSlider NeoPixelSleepHourSlider"></div>
						</div>
						<div>
							<span class="ps-input NeoPixelSleepMinute">0</span> <span class="NeoPixelSleepUnit">min</span>
							<div class="NeoPixelSleepSlider NeoPixelSleepMinuteSlider"></div>
						</div>
					</div>
					<span class="ps-button setNeoPixelSleep">set</span>
				</div>
			</div>
		</div>
<?
	}
	public static function saveColor($r, $g, $b, $fav = false) {
		global $database;
		if(!($database instanceof wpDatabase)) {
			$database = new wpDatabase();
		}
				$sql = "
MERGE INTO [neopixel] AS [TARGET]
	USING (
		VALUES (
			" . $r . "," . $g . "," . $b . ", " . security::getIdFromUser() . ", " . ($fav ? 1 : 0) . "
		)
	) AS [SOURCE] (
			[r], [g], [b], [id_user], [fav]
	) ON
		[TARGET].[r] = [SOURCE].[r] AND
		[TARGET].[g] = [SOURCE].[g] AND
		[TARGET].[b] = [SOURCE].[b] AND
		[TARGET].[id_user] = [SOURCE].[id_user]
	WHEN MATCHED THEN
		UPDATE SET
			[TARGET].[fav] = [SOURCE].[fav],
			[TARGET].[saved] = GETDATE()
	WHEN NOT MATCHED THEN
		INSERT (
			[r], [g], [b], [id_user], [fav]
		)
		VALUES (
			[SOURCE].[r], [SOURCE].[g], [SOURCE].[b], [SOURCE].[id_user], [SOURCE].[fav]
		)
	OUTPUT [INSERTED].[id_neopixel] AS [ID];
	--DELETE FROM [neopixel] WHERE [id_user] = " . security::getIdFromUser() . " AND [saved] NOT IN (SELECT TOP 10 [saved] FROM [neopixel] WHERE [id_user] = " . security::getIdFromUser() . " ORDER BY [saved]);";
		$database->query($sql);
		//echo 'saved';
	}
	public static function deleteFavColor() {
		global $database;
		if(!($database instanceof wpDatabase)) {
			$database = new wpDatabase();
		}
		$sql = "UPDATE [neopixel] SET [fav] = 0 WHERE [id_user] = " . security::getIdFromUser() . ";" .
		"DELETE T
FROM (
	SELECT *, DupRank = ROW_NUMBER() OVER (
		PARTITION BY [r], [g], [b] ORDER BY (SELECT NULL)
	) FROM [neopixel]
) AS T WHERE DupRank > 1;";
		$database->query($sql);
	}
}
?>

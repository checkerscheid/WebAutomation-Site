<?
//###################################################################################
//#                                                                                 #
//#              (C) FreakaZone GmbH                                                #
//#              =======================                                            #
//#                                                                                 #
//###################################################################################
//#                                                                                 #
//# Author       : Christian Scheid                                                 #
//# Date         : 05.12.2018                                                       #
//#                                                                                 #
//# Revision     : $Rev:: 609                                                     $ #
//# Author       : $Author::                                                      $ #
//# File-ID      : $Id:: wpConvert.psys 609 2024-05-15 14:54:17Z                  $ #
//#                                                                                 #
//###################################################################################
namespace system\Helper;
/**
 * @author C_Scheid
 */
class wpConvert {
	/**  */
	static public $monate = array('Januar','Februar','März','April','Mai','Juni','Juli','August','September','Oktober','November','Dezember');
	/**  */
	static public $weekdays = array(1 => 'Montag', 2 => 'Dienstag', 3 => 'Mittwoch', 4 => 'Donnerstag', 5 => 'Freitag', 6 => 'Samstag', 7 => 'Sonntag');
	/**
	 *
	 * @param $DateTime
	 * @param string $ShowSeconds
	 * @return string
	 */
	public static function getDateTimeFromDB($DateTime, $ShowSeconds = true) {
		if(preg_match('/^(20)\\d\\d-(0?[1-9]|1[012])-(0?[1-9]|[12][0-9]|3[01]) ([01]?[0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]$/', $DateTime) == 1) {
			$spliting = explode(' ', $DateTime);
			$date = explode("-", $spliting[0]);
			$time = explode(":", $spliting[1]);
			return $date[2].'. '.self::$monate[$date[1]-1].' '.$date[0].' '.(($ShowSeconds) ? $spliting[1] : $time[0].':'.$time[1]);
		} else {
			return '-';
		}
	}
	/**
	 *
	 * @param $DateTime
	 * @param string $ShowSeconds
	 * @return string
	 */
	public static function getdeDateTimeFromDB($DateTime, $ShowSeconds = true) {
		if(is_object($DateTime) && get_class($DateTime) == 'DateTime') {
			return $DateTime->format('j.m.Y'.($ShowSeconds ? ' H:i:s': ''));
		}
		if($DateTime != null && preg_match('/^(20)\\d\\d-(0?[1-9]|1[012])-(0?[1-9]|[12][0-9]|3[01]) ([01]?[0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]$/', $DateTime) == 1) {
			$spliting = explode(' ', $DateTime);
			$date = explode("-", $spliting[0]);
			$time = explode(":", $spliting[1]);
			return $date[2].'.'.$date[1].'.'.$date[0].' '.(($ShowSeconds) ? $spliting[1] : $time[0].':'.$time[1]);
		} else {
			return '-';
		}
	}
	/**
	 *
	 * @param $DateTime
	 * @return string
	 */
	public static function getReadDateTimeFromDB($DateTime, $ShowSeconds = true) {
		if(is_object($DateTime) && get_class($DateTime) == 'DateTime') {
			return $DateTime->format('j.m.Y'.($ShowSeconds ? ' H:i:s': ''));
		}
		if(preg_match('/^(20)\\d\\d-(0?[1-9]|1[012])-(0?[1-9]|[12][0-9]|3[01]) ([01]?[0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]$/', $DateTime) == 1) {
			$spliting = explode(' ', $DateTime);
			$date = explode("-", $spliting[0]);
			$MyDate = $date[2].'. '.self::$monate[$date[1]-1].' '.$date[0];
			if($spliting[0] == date('Y-m-d')) $MyDate = 'heute';
			if($date[0].'-'.$date[1].'-'.($date[2]+1) == date('Y-m-d')) $MyDate = 'gestern';
			return $MyDate.' um '.$spliting[1].' Uhr';
		} else {
			return '-';
		}
	}
	public static function getDateTimeforJS($date) {
		if($date instanceof \DateTime) {
			$returns = '';
			$t = $date->getTimestamp();
			$returns .= idate('Y', $t).', ';
			$returns .= (idate('m', $t) - 1).', ';
			$returns .= idate('d', $t).', ';
			$returns .= idate('H', $t).', ';
			$returns .= idate('i', $t).', ';
			$returns .= idate('s', $t);
			return $returns;
		}
		return null;
	}
	public static function getTimeforJS($date) {
		if($date instanceof \DateTime) {
			$returns = '';
			$t = $date->getTimestamp();
			$returns .= idate('H', $t).', ';
			$returns .= idate('i', $t).', ';
			$returns .= idate('s', $t);
			return $returns;
		}
		return null;
	}
	/**
	 *
	 * @return string
	 */
	public static function getDateTime() {
		return date('Y-m-d\TH:i:s');
	}
	/**
	 *
	 * @param $input
	 * @return mixed
	 */
	public static function cleanName($input, $allowBlank = true) {
		$umlaute = array('/ä/', '/ö/', '/ü/', '/Ä/', '/Ö/', '/Ü/', '/ß/');
		$ersetzung = array('ae', 'oe', 'ue', 'Ae', 'Oe', 'Ue', 'ss');
		$clean = preg_replace($umlaute, $ersetzung, trim($input));
		$output = preg_replace('/[^a-zA-Z0-9_'.(($allowBlank) ? ' ' : '').']/', '_', $clean);
		return $output;
	}
	/**
	 *
	 * @param $size
	 * @return string
	 */
	public static function filesize($size){
		if($size < 1024){
			return number_format($size, 0, ",", ".")." Bytes";
		}elseif($size < 1048576){
			return number_format($size/1024, 0, ",", ".")." kB";
		}else{
			return number_format($size/1048576, 1, ",", ".")." MB";
		}
	}

	public static function getUnit($value, $unit) {
		$returns = $value;
		$m = null;
		if(preg_match_all('/(\d+):([^;]+)/', $unit, $m) > 0) {
			for($i = 0; $i < count($m[0]); $i++) {
				if($value == $m[1][$i]) $returns = $m[2][$i];
			}
		} else if(preg_match_all('/(True|False):([^;]+)/', $unit, $m) > 0) {
			for($i = 0; $i < count($m[0]); $i++) {
				if($value == $m[1][$i]) $returns = $m[2][$i];
			}
		} else {
			$returns = $value . ' ' . $unit;
		}
		return $returns;
	}
}
?>
